
Thread_Race_Condition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004090  08004090  00005090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004104  08004104  00005104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800410c  0800410c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08004110  08004110  00005110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000074  24000000  08004114  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000052c8  24000074  08004188  00006074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400533c  08004188  0000633c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a34a  00000000  00000000  000060a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d6e  00000000  00000000  000103ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000009b8  00000000  00000000  00012160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000073e  00000000  00000000  00012b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000366a5  00000000  00000000  00013256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000b80f  00000000  00000000  000498fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001583e8  00000000  00000000  0005510a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ad4f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d30  00000000  00000000  001ad538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000079  00000000  00000000  001b0268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004078 	.word	0x08004078

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08004078 	.word	0x08004078

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af02      	add	r7, sp, #8

#if RESOLVE_RACE_COND
	xMutex = xSemaphoreCreateMutex();
#endif

	status = xTaskCreate(increment1_handler, "Thread-1", 200,NULL, 2,NULL);
 8000386:	2300      	movs	r3, #0
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2302      	movs	r3, #2
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	2300      	movs	r3, #0
 8000390:	22c8      	movs	r2, #200	@ 0xc8
 8000392:	491e      	ldr	r1, [pc, #120]	@ (800040c <main+0x8c>)
 8000394:	481e      	ldr	r0, [pc, #120]	@ (8000410 <main+0x90>)
 8000396:	f001 ff14 	bl	80021c2 <xTaskCreate>
 800039a:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d00d      	beq.n	80003be <main+0x3e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80003a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80003a6:	b672      	cpsid	i
 80003a8:	f383 8811 	msr	BASEPRI, r3
 80003ac:	f3bf 8f6f 	isb	sy
 80003b0:	f3bf 8f4f 	dsb	sy
 80003b4:	b662      	cpsie	i
 80003b6:	60bb      	str	r3, [r7, #8]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80003b8:	bf00      	nop
 80003ba:	bf00      	nop
 80003bc:	e7fd      	b.n	80003ba <main+0x3a>

	status = xTaskCreate(increment2_handler, "Thread-2", 200,NULL, 2,NULL);
 80003be:	2300      	movs	r3, #0
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	2302      	movs	r3, #2
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2300      	movs	r3, #0
 80003c8:	22c8      	movs	r2, #200	@ 0xc8
 80003ca:	4912      	ldr	r1, [pc, #72]	@ (8000414 <main+0x94>)
 80003cc:	4812      	ldr	r0, [pc, #72]	@ (8000418 <main+0x98>)
 80003ce:	f001 fef8 	bl	80021c2 <xTaskCreate>
 80003d2:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d00d      	beq.n	80003f6 <main+0x76>
        __asm volatile
 80003da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80003de:	b672      	cpsid	i
 80003e0:	f383 8811 	msr	BASEPRI, r3
 80003e4:	f3bf 8f6f 	isb	sy
 80003e8:	f3bf 8f4f 	dsb	sy
 80003ec:	b662      	cpsie	i
 80003ee:	607b      	str	r3, [r7, #4]
    }
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop
 80003f4:	e7fd      	b.n	80003f2 <main+0x72>

	vTaskStartScheduler();
 80003f6:	f002 f82d 	bl	8002454 <vTaskStartScheduler>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fb6b 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f80d 	bl	800041c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f875 	bl	80004f0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000406:	bf00      	nop
 8000408:	e7fd      	b.n	8000406 <main+0x86>
 800040a:	bf00      	nop
 800040c:	08004090 	.word	0x08004090
 8000410:	08000775 	.word	0x08000775
 8000414:	0800409c 	.word	0x0800409c
 8000418:	080007a1 	.word	0x080007a1

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b09c      	sub	sp, #112	@ 0x70
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000426:	224c      	movs	r2, #76	@ 0x4c
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f003 f803 	bl	8003436 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2220      	movs	r2, #32
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f002 fffd 	bl	8003436 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800043c:	2002      	movs	r0, #2
 800043e:	f000 fe81 	bl	8001144 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000442:	2300      	movs	r3, #0
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	4b28      	ldr	r3, [pc, #160]	@ (80004e8 <SystemClock_Config+0xcc>)
 8000448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800044a:	4a27      	ldr	r2, [pc, #156]	@ (80004e8 <SystemClock_Config+0xcc>)
 800044c:	f023 0301 	bic.w	r3, r3, #1
 8000450:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000452:	4b25      	ldr	r3, [pc, #148]	@ (80004e8 <SystemClock_Config+0xcc>)
 8000454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	4b23      	ldr	r3, [pc, #140]	@ (80004ec <SystemClock_Config+0xd0>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000464:	4a21      	ldr	r2, [pc, #132]	@ (80004ec <SystemClock_Config+0xd0>)
 8000466:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b1f      	ldr	r3, [pc, #124]	@ (80004ec <SystemClock_Config+0xd0>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000474:	603b      	str	r3, [r7, #0]
 8000476:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000478:	bf00      	nop
 800047a:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <SystemClock_Config+0xd0>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000486:	d1f8      	bne.n	800047a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000488:	2302      	movs	r3, #2
 800048a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800048c:	2301      	movs	r3, #1
 800048e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000490:	2340      	movs	r3, #64	@ 0x40
 8000492:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000494:	2300      	movs	r3, #0
 8000496:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fe8b 	bl	80011b8 <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004a8:	f000 f990 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	233f      	movs	r3, #63	@ 0x3f
 80004ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2101      	movs	r1, #1
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 facb 	bl	8001a6c <HAL_RCC_ClockConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80004dc:	f000 f976 	bl	80007cc <Error_Handler>
  }
}
 80004e0:	bf00      	nop
 80004e2:	3770      	adds	r7, #112	@ 0x70
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	58000400 	.word	0x58000400
 80004ec:	58024800 	.word	0x58024800

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08c      	sub	sp, #48	@ 0x30
 80004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	4b94      	ldr	r3, [pc, #592]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800050c:	4a92      	ldr	r2, [pc, #584]	@ (8000758 <MX_GPIO_Init+0x268>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000516:	4b90      	ldr	r3, [pc, #576]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	61bb      	str	r3, [r7, #24]
 8000522:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000524:	4b8c      	ldr	r3, [pc, #560]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800052a:	4a8b      	ldr	r2, [pc, #556]	@ (8000758 <MX_GPIO_Init+0x268>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000530:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000534:	4b88      	ldr	r3, [pc, #544]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b85      	ldr	r3, [pc, #532]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000548:	4a83      	ldr	r2, [pc, #524]	@ (8000758 <MX_GPIO_Init+0x268>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000552:	4b81      	ldr	r3, [pc, #516]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	613b      	str	r3, [r7, #16]
 800055e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b7d      	ldr	r3, [pc, #500]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000566:	4a7c      	ldr	r2, [pc, #496]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000570:	4b79      	ldr	r3, [pc, #484]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b76      	ldr	r3, [pc, #472]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000584:	4a74      	ldr	r2, [pc, #464]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800058e:	4b72      	ldr	r3, [pc, #456]	@ (8000758 <MX_GPIO_Init+0x268>)
 8000590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800059c:	4b6e      	ldr	r3, [pc, #440]	@ (8000758 <MX_GPIO_Init+0x268>)
 800059e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005a2:	4a6d      	ldr	r2, [pc, #436]	@ (8000758 <MX_GPIO_Init+0x268>)
 80005a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ac:	4b6a      	ldr	r3, [pc, #424]	@ (8000758 <MX_GPIO_Init+0x268>)
 80005ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ba:	4b67      	ldr	r3, [pc, #412]	@ (8000758 <MX_GPIO_Init+0x268>)
 80005bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c0:	4a65      	ldr	r2, [pc, #404]	@ (8000758 <MX_GPIO_Init+0x268>)
 80005c2:	f043 0310 	orr.w	r3, r3, #16
 80005c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ca:	4b63      	ldr	r3, [pc, #396]	@ (8000758 <MX_GPIO_Init+0x268>)
 80005cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005d0:	f003 0310 	and.w	r3, r3, #16
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f244 0101 	movw	r1, #16385	@ 0x4001
 80005de:	485f      	ldr	r0, [pc, #380]	@ (800075c <MX_GPIO_Init+0x26c>)
 80005e0:	f000 fd96 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ea:	485d      	ldr	r0, [pc, #372]	@ (8000760 <MX_GPIO_Init+0x270>)
 80005ec:	f000 fd90 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2102      	movs	r1, #2
 80005f4:	485b      	ldr	r0, [pc, #364]	@ (8000764 <MX_GPIO_Init+0x274>)
 80005f6:	f000 fd8b 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	4619      	mov	r1, r3
 800060e:	4856      	ldr	r0, [pc, #344]	@ (8000768 <MX_GPIO_Init+0x278>)
 8000610:	f000 fbce 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000614:	2332      	movs	r3, #50	@ 0x32
 8000616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000624:	230b      	movs	r3, #11
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	484e      	ldr	r0, [pc, #312]	@ (8000768 <MX_GPIO_Init+0x278>)
 8000630:	f000 fbbe 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000634:	2386      	movs	r3, #134	@ 0x86
 8000636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000644:	230b      	movs	r3, #11
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	4847      	ldr	r0, [pc, #284]	@ (800076c <MX_GPIO_Init+0x27c>)
 8000650:	f000 fbae 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000654:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	483b      	ldr	r0, [pc, #236]	@ (800075c <MX_GPIO_Init+0x26c>)
 800066e:	f000 fb9f 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000672:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000684:	230b      	movs	r3, #11
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	4833      	ldr	r0, [pc, #204]	@ (800075c <MX_GPIO_Init+0x26c>)
 8000690:	f000 fb8e 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000694:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006a6:	2307      	movs	r3, #7
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	482b      	ldr	r0, [pc, #172]	@ (8000760 <MX_GPIO_Init+0x270>)
 80006b2:	f000 fb7d 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80006b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4824      	ldr	r0, [pc, #144]	@ (8000760 <MX_GPIO_Init+0x270>)
 80006d0:	f000 fb6e 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80006d4:	2380      	movs	r3, #128	@ 0x80
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4619      	mov	r1, r3
 80006e8:	4821      	ldr	r0, [pc, #132]	@ (8000770 <MX_GPIO_Init+0x280>)
 80006ea:	f000 fb61 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80006ee:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000700:	230a      	movs	r3, #10
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4818      	ldr	r0, [pc, #96]	@ (800076c <MX_GPIO_Init+0x27c>)
 800070c:	f000 fb50 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000710:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000722:	230b      	movs	r3, #11
 8000724:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	4810      	ldr	r0, [pc, #64]	@ (8000770 <MX_GPIO_Init+0x280>)
 800072e:	f000 fb3f 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000732:	2302      	movs	r3, #2
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4806      	ldr	r0, [pc, #24]	@ (8000764 <MX_GPIO_Init+0x274>)
 800074a:	f000 fb31 	bl	8000db0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	3730      	adds	r7, #48	@ 0x30
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	58024400 	.word	0x58024400
 800075c:	58020400 	.word	0x58020400
 8000760:	58020c00 	.word	0x58020c00
 8000764:	58021000 	.word	0x58021000
 8000768:	58020800 	.word	0x58020800
 800076c:	58020000 	.word	0x58020000
 8000770:	58021800 	.word	0x58021800

08000774 <increment1_handler>:

/* USER CODE BEGIN 4 */
static void increment1_handler(void* params)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
            sharedVar++;
            printf("sharedVar: %d\n", sharedVar);
            xSemaphoreGive(xMutex);
        }
#else
        sharedVar++;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <increment1_handler+0x24>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a05      	ldr	r2, [pc, #20]	@ (8000798 <increment1_handler+0x24>)
 8000784:	6013      	str	r3, [r2, #0]
        printf("sharedVar: %d\n", sharedVar);
 8000786:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <increment1_handler+0x24>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4619      	mov	r1, r3
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <increment1_handler+0x28>)
 800078e:	f002 fdfd 	bl	800338c <iprintf>
        sharedVar++;
 8000792:	bf00      	nop
 8000794:	e7f2      	b.n	800077c <increment1_handler+0x8>
 8000796:	bf00      	nop
 8000798:	24000090 	.word	0x24000090
 800079c:	080040a8 	.word	0x080040a8

080007a0 <increment2_handler>:
#endif
	}
}

static void increment2_handler(void* params)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
            sharedVar++;
            printf("sharedVar: %d\n", sharedVar);
            xSemaphoreGive(xMutex);
        }
#else
        sharedVar++;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <increment2_handler+0x24>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <increment2_handler+0x24>)
 80007b0:	6013      	str	r3, [r2, #0]
        printf("sharedVar: %d\n", sharedVar);
 80007b2:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <increment2_handler+0x24>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <increment2_handler+0x28>)
 80007ba:	f002 fde7 	bl	800338c <iprintf>
        sharedVar++;
 80007be:	bf00      	nop
 80007c0:	e7f2      	b.n	80007a8 <increment2_handler+0x8>
 80007c2:	bf00      	nop
 80007c4:	24000090 	.word	0x24000090
 80007c8:	080040a8 	.word	0x080040a8

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <Error_Handler+0x8>

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <HAL_MspInit+0x30>)
 80007e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007e4:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <HAL_MspInit+0x30>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_MspInit+0x30>)
 80007f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	58024400 	.word	0x58024400

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <NMI_Handler+0x4>

08000814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <MemManage_Handler+0x4>

08000824 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <UsageFault_Handler+0x4>

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <ITM_SendChar+0x48>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <ITM_SendChar+0x48>)
 8000854:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000858:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <ITM_SendChar+0x4c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a0c      	ldr	r2, [pc, #48]	@ (8000890 <ITM_SendChar+0x4c>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000866:	bf00      	nop
 8000868:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0f8      	beq.n	8000868 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000876:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	6013      	str	r3, [r2, #0]
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000edfc 	.word	0xe000edfc
 8000890:	e0000e00 	.word	0xe0000e00

08000894 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	e00a      	b.n	80008bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008a6:	f3af 8000 	nop.w
 80008aa:	4601      	mov	r1, r0
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	60ba      	str	r2, [r7, #8]
 80008b2:	b2ca      	uxtb	r2, r1
 80008b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3301      	adds	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbf0      	blt.n	80008a6 <_read+0x12>
  }

  return len;
 80008c4:	687b      	ldr	r3, [r7, #4]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	e009      	b.n	80008f4 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	60ba      	str	r2, [r7, #8]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ffab 	bl	8000844 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3301      	adds	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	dbf1      	blt.n	80008e0 <_write+0x12>
  }
  return len;
 80008fc:	687b      	ldr	r3, [r7, #4]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <_close>:

int _close(int file)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000912:	4618      	mov	r0, r3
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800092e:	605a      	str	r2, [r3, #4]
  return 0;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <_isatty>:

int _isatty(int file)
{
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000974:	4b37      	ldr	r3, [pc, #220]	@ (8000a54 <SystemInit+0xe4>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097a:	4a36      	ldr	r2, [pc, #216]	@ (8000a54 <SystemInit+0xe4>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000984:	4b34      	ldr	r3, [pc, #208]	@ (8000a58 <SystemInit+0xe8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f003 030f 	and.w	r3, r3, #15
 800098c:	2b06      	cmp	r3, #6
 800098e:	d807      	bhi.n	80009a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000990:	4b31      	ldr	r3, [pc, #196]	@ (8000a58 <SystemInit+0xe8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f023 030f 	bic.w	r3, r3, #15
 8000998:	4a2f      	ldr	r2, [pc, #188]	@ (8000a58 <SystemInit+0xe8>)
 800099a:	f043 0307 	orr.w	r3, r3, #7
 800099e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009a0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a5c <SystemInit+0xec>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a2d      	ldr	r2, [pc, #180]	@ (8000a5c <SystemInit+0xec>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009ac:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <SystemInit+0xec>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009b2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <SystemInit+0xec>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4929      	ldr	r1, [pc, #164]	@ (8000a5c <SystemInit+0xec>)
 80009b8:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <SystemInit+0xf0>)
 80009ba:	4013      	ands	r3, r2
 80009bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009be:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <SystemInit+0xe8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d007      	beq.n	80009da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ca:	4b23      	ldr	r3, [pc, #140]	@ (8000a58 <SystemInit+0xe8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f023 030f 	bic.w	r3, r3, #15
 80009d2:	4a21      	ldr	r2, [pc, #132]	@ (8000a58 <SystemInit+0xe8>)
 80009d4:	f043 0307 	orr.w	r3, r3, #7
 80009d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009da:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <SystemInit+0xec>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <SystemInit+0xec>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <SystemInit+0xec>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <SystemInit+0xec>)
 80009ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000a64 <SystemInit+0xf4>)
 80009f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <SystemInit+0xec>)
 80009f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <SystemInit+0xf8>)
 80009f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <SystemInit+0xec>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <SystemInit+0xfc>)
 80009fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <SystemInit+0xec>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <SystemInit+0xec>)
 8000a06:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <SystemInit+0xfc>)
 8000a08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <SystemInit+0xec>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <SystemInit+0xec>)
 8000a12:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <SystemInit+0xfc>)
 8000a14:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <SystemInit+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <SystemInit+0xec>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0e      	ldr	r2, [pc, #56]	@ (8000a5c <SystemInit+0xec>)
 8000a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <SystemInit+0xec>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <SystemInit+0x100>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <SystemInit+0x104>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a3a:	d202      	bcs.n	8000a42 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <SystemInit+0x108>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <SystemInit+0x10c>)
 8000a44:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00
 8000a58:	52002000 	.word	0x52002000
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a64:	02020200 	.word	0x02020200
 8000a68:	01ff0000 	.word	0x01ff0000
 8000a6c:	01010280 	.word	0x01010280
 8000a70:	5c001000 	.word	0x5c001000
 8000a74:	ffff0000 	.word	0xffff0000
 8000a78:	51008108 	.word	0x51008108
 8000a7c:	52004000 	.word	0x52004000

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a84:	f7ff ff74 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	@ (8000ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aae:	f002 fd11 	bl	80034d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fc65 	bl	8000380 <main>
  bx  lr
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000abc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ac0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000ac4:	08004114 	.word	0x08004114
  ldr r2, =_sbss
 8000ac8:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000acc:	2400533c 	.word	0x2400533c

08000ad0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC3_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ada:	2003      	movs	r0, #3
 8000adc:	f000 f936 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ae0:	f001 f97a 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_Init+0x68>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	0a1b      	lsrs	r3, r3, #8
 8000aec:	f003 030f 	and.w	r3, r3, #15
 8000af0:	4913      	ldr	r1, [pc, #76]	@ (8000b40 <HAL_Init+0x6c>)
 8000af2:	5ccb      	ldrb	r3, [r1, r3]
 8000af4:	f003 031f 	and.w	r3, r3, #31
 8000af8:	fa22 f303 	lsr.w	r3, r2, r3
 8000afc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_Init+0x68>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	4a0e      	ldr	r2, [pc, #56]	@ (8000b40 <HAL_Init+0x6c>)
 8000b08:	5cd3      	ldrb	r3, [r2, r3]
 8000b0a:	f003 031f 	and.w	r3, r3, #31
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	fa22 f303 	lsr.w	r3, r2, r3
 8000b14:	4a0b      	ldr	r2, [pc, #44]	@ (8000b44 <HAL_Init+0x70>)
 8000b16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b18:	4a0b      	ldr	r2, [pc, #44]	@ (8000b48 <HAL_Init+0x74>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f814 	bl	8000b4c <HAL_InitTick>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e002      	b.n	8000b34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2e:	f7ff fe53 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	080040c0 	.word	0x080040c0
 8000b44:	24000004 	.word	0x24000004
 8000b48:	24000000 	.word	0x24000000

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b54:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <HAL_InitTick+0x60>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d101      	bne.n	8000b60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e021      	b.n	8000ba4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <HAL_InitTick+0x64>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <HAL_InitTick+0x60>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f90d 	bl	8000d96 <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 f8e5 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	@ (8000bb4 <HAL_InitTick+0x68>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2400000c 	.word	0x2400000c
 8000bb0:	24000000 	.word	0x24000000
 8000bb4:	24000008 	.word	0x24000008

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	24000094 	.word	0x24000094

08000bd0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000bd4:	4b03      	ldr	r3, [pc, #12]	@ (8000be4 <HAL_GetREVID+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	0c1b      	lsrs	r3, r3, #16
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	5c001000 	.word	0x5c001000

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x40>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x40>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00
 8000c2c:	05fa0000 	.word	0x05fa0000

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	@ (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	@ (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	@ 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	@ 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff47 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d70:	f7ff ff5e 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000d74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	6978      	ldr	r0, [r7, #20]
 8000d7c:	f7ff ff90 	bl	8000ca0 <NVIC_EncodePriority>
 8000d80:	4602      	mov	r2, r0
 8000d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff5f 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffb2 	bl	8000d08 <SysTick_Config>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000dbe:	4b89      	ldr	r3, [pc, #548]	@ (8000fe4 <HAL_GPIO_Init+0x234>)
 8000dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dc2:	e194      	b.n	80010ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8186 	beq.w	80010e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d005      	beq.n	8000df4 <HAL_GPIO_Init+0x44>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d130      	bne.n	8000e56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	f003 0201 	and.w	r2, r3, #1
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d017      	beq.n	8000e92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d123      	bne.n	8000ee6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	69b9      	ldr	r1, [r7, #24]
 8000ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0203 	and.w	r2, r3, #3
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 80e0 	beq.w	80010e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe8 <HAL_GPIO_Init+0x238>)
 8000f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f2e:	4a2e      	ldr	r2, [pc, #184]	@ (8000fe8 <HAL_GPIO_Init+0x238>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f38:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe8 <HAL_GPIO_Init+0x238>)
 8000f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f46:	4a29      	ldr	r2, [pc, #164]	@ (8000fec <HAL_GPIO_Init+0x23c>)
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <HAL_GPIO_Init+0x240>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d052      	beq.n	8001018 <HAL_GPIO_Init+0x268>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff4 <HAL_GPIO_Init+0x244>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d031      	beq.n	8000fde <HAL_GPIO_Init+0x22e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <HAL_GPIO_Init+0x248>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d02b      	beq.n	8000fda <HAL_GPIO_Init+0x22a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a1d      	ldr	r2, [pc, #116]	@ (8000ffc <HAL_GPIO_Init+0x24c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d025      	beq.n	8000fd6 <HAL_GPIO_Init+0x226>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001000 <HAL_GPIO_Init+0x250>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d01f      	beq.n	8000fd2 <HAL_GPIO_Init+0x222>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a1b      	ldr	r2, [pc, #108]	@ (8001004 <HAL_GPIO_Init+0x254>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x21e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001008 <HAL_GPIO_Init+0x258>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x21a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	@ (800100c <HAL_GPIO_Init+0x25c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x216>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a18      	ldr	r2, [pc, #96]	@ (8001010 <HAL_GPIO_Init+0x260>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a17      	ldr	r2, [pc, #92]	@ (8001014 <HAL_GPIO_Init+0x264>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x20e>
 8000fba:	2309      	movs	r3, #9
 8000fbc:	e02d      	b.n	800101a <HAL_GPIO_Init+0x26a>
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	e02b      	b.n	800101a <HAL_GPIO_Init+0x26a>
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	e029      	b.n	800101a <HAL_GPIO_Init+0x26a>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e027      	b.n	800101a <HAL_GPIO_Init+0x26a>
 8000fca:	2306      	movs	r3, #6
 8000fcc:	e025      	b.n	800101a <HAL_GPIO_Init+0x26a>
 8000fce:	2305      	movs	r3, #5
 8000fd0:	e023      	b.n	800101a <HAL_GPIO_Init+0x26a>
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	e021      	b.n	800101a <HAL_GPIO_Init+0x26a>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e01f      	b.n	800101a <HAL_GPIO_Init+0x26a>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e01d      	b.n	800101a <HAL_GPIO_Init+0x26a>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e01b      	b.n	800101a <HAL_GPIO_Init+0x26a>
 8000fe2:	bf00      	nop
 8000fe4:	58000080 	.word	0x58000080
 8000fe8:	58024400 	.word	0x58024400
 8000fec:	58000400 	.word	0x58000400
 8000ff0:	58020000 	.word	0x58020000
 8000ff4:	58020400 	.word	0x58020400
 8000ff8:	58020800 	.word	0x58020800
 8000ffc:	58020c00 	.word	0x58020c00
 8001000:	58021000 	.word	0x58021000
 8001004:	58021400 	.word	0x58021400
 8001008:	58021800 	.word	0x58021800
 800100c:	58021c00 	.word	0x58021c00
 8001010:	58022000 	.word	0x58022000
 8001014:	58022400 	.word	0x58022400
 8001018:	2300      	movs	r3, #0
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	f002 0203 	and.w	r2, r2, #3
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	4093      	lsls	r3, r2
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800102a:	4938      	ldr	r1, [pc, #224]	@ (800110c <HAL_GPIO_Init+0x35c>)
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800105e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800108c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	3301      	adds	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa22 f303 	lsr.w	r3, r2, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f47f ae63 	bne.w	8000dc4 <HAL_GPIO_Init+0x14>
  }
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	3724      	adds	r7, #36	@ 0x24
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	58000400 	.word	0x58000400

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800112c:	e003      	b.n	8001136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	619a      	str	r2, [r3, #24]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800114c:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <HAL_PWREx_ConfigSupply+0x70>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b04      	cmp	r3, #4
 8001156:	d00a      	beq.n	800116e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001158:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <HAL_PWREx_ConfigSupply+0x70>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	429a      	cmp	r2, r3
 8001164:	d001      	beq.n	800116a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e01f      	b.n	80011aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e01d      	b.n	80011aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <HAL_PWREx_ConfigSupply+0x70>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	f023 0207 	bic.w	r2, r3, #7
 8001176:	490f      	ldr	r1, [pc, #60]	@ (80011b4 <HAL_PWREx_ConfigSupply+0x70>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4313      	orrs	r3, r2
 800117c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800117e:	f7ff fd1b 	bl	8000bb8 <HAL_GetTick>
 8001182:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001184:	e009      	b.n	800119a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001186:	f7ff fd17 	bl	8000bb8 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001194:	d901      	bls.n	800119a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e007      	b.n	80011aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_PWREx_ConfigSupply+0x70>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011a6:	d1ee      	bne.n	8001186 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	58024800 	.word	0x58024800

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	@ 0x30
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f000 bc48 	b.w	8001a5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 8088 	beq.w	80012ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011da:	4b99      	ldr	r3, [pc, #612]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011e4:	4b96      	ldr	r3, [pc, #600]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80011e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d007      	beq.n	8001200 <HAL_RCC_OscConfig+0x48>
 80011f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f2:	2b18      	cmp	r3, #24
 80011f4:	d111      	bne.n	800121a <HAL_RCC_OscConfig+0x62>
 80011f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d10c      	bne.n	800121a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	4b8f      	ldr	r3, [pc, #572]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d06d      	beq.n	80012e8 <HAL_RCC_OscConfig+0x130>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d169      	bne.n	80012e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	f000 bc21 	b.w	8001a5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001222:	d106      	bne.n	8001232 <HAL_RCC_OscConfig+0x7a>
 8001224:	4b86      	ldr	r3, [pc, #536]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a85      	ldr	r2, [pc, #532]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800122a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e02e      	b.n	8001290 <HAL_RCC_OscConfig+0xd8>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0x9c>
 800123a:	4b81      	ldr	r3, [pc, #516]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a80      	ldr	r2, [pc, #512]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b7e      	ldr	r3, [pc, #504]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a7d      	ldr	r2, [pc, #500]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800124c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e01d      	b.n	8001290 <HAL_RCC_OscConfig+0xd8>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0xc0>
 800125e:	4b78      	ldr	r3, [pc, #480]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a77      	ldr	r2, [pc, #476]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b75      	ldr	r3, [pc, #468]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a74      	ldr	r2, [pc, #464]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0xd8>
 8001278:	4b71      	ldr	r3, [pc, #452]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a70      	ldr	r2, [pc, #448]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b6e      	ldr	r3, [pc, #440]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a6d      	ldr	r2, [pc, #436]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800128e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fc8e 	bl	8000bb8 <HAL_GetTick>
 800129c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fc8a 	bl	8000bb8 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	@ 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e3d4      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b2:	4b63      	ldr	r3, [pc, #396]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0xe8>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc7a 	bl	8000bb8 <HAL_GetTick>
 80012c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fc76 	bl	8000bb8 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	@ 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e3c0      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012da:	4b59      	ldr	r3, [pc, #356]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x110>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 80ca 	beq.w	800148c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f8:	4b51      	ldr	r3, [pc, #324]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001300:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001302:	4b4f      	ldr	r3, [pc, #316]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001306:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <HAL_RCC_OscConfig+0x166>
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	2b18      	cmp	r3, #24
 8001312:	d156      	bne.n	80013c2 <HAL_RCC_OscConfig+0x20a>
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d151      	bne.n	80013c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800131e:	4b48      	ldr	r3, [pc, #288]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <HAL_RCC_OscConfig+0x17e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e392      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001336:	4b42      	ldr	r3, [pc, #264]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 0219 	bic.w	r2, r3, #25
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	493f      	ldr	r1, [pc, #252]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fc36 	bl	8000bb8 <HAL_GetTick>
 800134c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff fc32 	bl	8000bb8 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e37c      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001362:	4b37      	ldr	r3, [pc, #220]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	f7ff fc2f 	bl	8000bd0 <HAL_GetREVID>
 8001372:	4603      	mov	r3, r0
 8001374:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001378:	4293      	cmp	r3, r2
 800137a:	d817      	bhi.n	80013ac <HAL_RCC_OscConfig+0x1f4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b40      	cmp	r3, #64	@ 0x40
 8001382:	d108      	bne.n	8001396 <HAL_RCC_OscConfig+0x1de>
 8001384:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800138c:	4a2c      	ldr	r2, [pc, #176]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800138e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001392:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001394:	e07a      	b.n	800148c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	031b      	lsls	r3, r3, #12
 80013a4:	4926      	ldr	r1, [pc, #152]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013aa:	e06f      	b.n	800148c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	061b      	lsls	r3, r3, #24
 80013ba:	4921      	ldr	r1, [pc, #132]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c0:	e064      	b.n	800148c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d047      	beq.n	800145a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 0219 	bic.w	r2, r3, #25
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	491a      	ldr	r1, [pc, #104]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fbec 	bl	8000bb8 <HAL_GetTick>
 80013e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e4:	f7ff fbe8 	bl	8000bb8 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e332      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	f7ff fbe5 	bl	8000bd0 <HAL_GetREVID>
 8001406:	4603      	mov	r3, r0
 8001408:	f241 0203 	movw	r2, #4099	@ 0x1003
 800140c:	4293      	cmp	r3, r2
 800140e:	d819      	bhi.n	8001444 <HAL_RCC_OscConfig+0x28c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b40      	cmp	r3, #64	@ 0x40
 8001416:	d108      	bne.n	800142a <HAL_RCC_OscConfig+0x272>
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001420:	4a07      	ldr	r2, [pc, #28]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001426:	6053      	str	r3, [r2, #4]
 8001428:	e030      	b.n	800148c <HAL_RCC_OscConfig+0x2d4>
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	031b      	lsls	r3, r3, #12
 8001438:	4901      	ldr	r1, [pc, #4]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800143a:	4313      	orrs	r3, r2
 800143c:	604b      	str	r3, [r1, #4]
 800143e:	e025      	b.n	800148c <HAL_RCC_OscConfig+0x2d4>
 8001440:	58024400 	.word	0x58024400
 8001444:	4b9a      	ldr	r3, [pc, #616]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	061b      	lsls	r3, r3, #24
 8001452:	4997      	ldr	r1, [pc, #604]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
 8001458:	e018      	b.n	800148c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b95      	ldr	r3, [pc, #596]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a94      	ldr	r2, [pc, #592]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff fba7 	bl	8000bb8 <HAL_GetTick>
 800146a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fba3 	bl	8000bb8 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e2ed      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001480:	4b8b      	ldr	r3, [pc, #556]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f0      	bne.n	800146e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a9 	beq.w	80015ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149a:	4b85      	ldr	r3, [pc, #532]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014a4:	4b82      	ldr	r3, [pc, #520]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 80014a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d007      	beq.n	80014c0 <HAL_RCC_OscConfig+0x308>
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b18      	cmp	r3, #24
 80014b4:	d13a      	bne.n	800152c <HAL_RCC_OscConfig+0x374>
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d135      	bne.n	800152c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014c0:	4b7b      	ldr	r3, [pc, #492]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_OscConfig+0x320>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b80      	cmp	r3, #128	@ 0x80
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e2c1      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014d8:	f7ff fb7a 	bl	8000bd0 <HAL_GetREVID>
 80014dc:	4603      	mov	r3, r0
 80014de:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d817      	bhi.n	8001516 <HAL_RCC_OscConfig+0x35e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d108      	bne.n	8001500 <HAL_RCC_OscConfig+0x348>
 80014ee:	4b70      	ldr	r3, [pc, #448]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80014f6:	4a6e      	ldr	r2, [pc, #440]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 80014f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80014fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014fe:	e075      	b.n	80015ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001500:	4b6b      	ldr	r3, [pc, #428]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	069b      	lsls	r3, r3, #26
 800150e:	4968      	ldr	r1, [pc, #416]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001514:	e06a      	b.n	80015ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001516:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	061b      	lsls	r3, r3, #24
 8001524:	4962      	ldr	r1, [pc, #392]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001526:	4313      	orrs	r3, r2
 8001528:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800152a:	e05f      	b.n	80015ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d042      	beq.n	80015ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001534:	4b5e      	ldr	r3, [pc, #376]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a5d      	ldr	r2, [pc, #372]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 800153a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800153e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fb3a 	bl	8000bb8 <HAL_GetTick>
 8001544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001548:	f7ff fb36 	bl	8000bb8 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e280      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800155a:	4b55      	ldr	r3, [pc, #340]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001566:	f7ff fb33 	bl	8000bd0 <HAL_GetREVID>
 800156a:	4603      	mov	r3, r0
 800156c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001570:	4293      	cmp	r3, r2
 8001572:	d817      	bhi.n	80015a4 <HAL_RCC_OscConfig+0x3ec>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	2b20      	cmp	r3, #32
 800157a:	d108      	bne.n	800158e <HAL_RCC_OscConfig+0x3d6>
 800157c:	4b4c      	ldr	r3, [pc, #304]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001584:	4a4a      	ldr	r2, [pc, #296]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001586:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800158a:	6053      	str	r3, [r2, #4]
 800158c:	e02e      	b.n	80015ec <HAL_RCC_OscConfig+0x434>
 800158e:	4b48      	ldr	r3, [pc, #288]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	069b      	lsls	r3, r3, #26
 800159c:	4944      	ldr	r1, [pc, #272]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
 80015a2:	e023      	b.n	80015ec <HAL_RCC_OscConfig+0x434>
 80015a4:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	061b      	lsls	r3, r3, #24
 80015b2:	493f      	ldr	r1, [pc, #252]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60cb      	str	r3, [r1, #12]
 80015b8:	e018      	b.n	80015ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015ba:	4b3d      	ldr	r3, [pc, #244]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a3c      	ldr	r2, [pc, #240]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 80015c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff faf7 	bl	8000bb8 <HAL_GetTick>
 80015ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015ce:	f7ff faf3 	bl	8000bb8 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e23d      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015e0:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d036      	beq.n	8001666 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d019      	beq.n	8001634 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001604:	4a2a      	ldr	r2, [pc, #168]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fad4 	bl	8000bb8 <HAL_GetTick>
 8001610:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fad0 	bl	8000bb8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e21a      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001626:	4b22      	ldr	r3, [pc, #136]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x45c>
 8001632:	e018      	b.n	8001666 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001634:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001638:	4a1d      	ldr	r2, [pc, #116]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff faba 	bl	8000bb8 <HAL_GetTick>
 8001644:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff fab6 	bl	8000bb8 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e200      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800165a:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 800165c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	2b00      	cmp	r3, #0
 8001670:	d039      	beq.n	80016e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d01c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800167a:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a0c      	ldr	r2, [pc, #48]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 8001680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001684:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001686:	f7ff fa97 	bl	8000bb8 <HAL_GetTick>
 800168a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800168e:	f7ff fa93 	bl	8000bb8 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e1dd      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016a0:	4b03      	ldr	r3, [pc, #12]	@ (80016b0 <HAL_RCC_OscConfig+0x4f8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x4d6>
 80016ac:	e01b      	b.n	80016e6 <HAL_RCC_OscConfig+0x52e>
 80016ae:	bf00      	nop
 80016b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016b4:	4b9b      	ldr	r3, [pc, #620]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9a      	ldr	r2, [pc, #616]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80016ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fa7a 	bl	8000bb8 <HAL_GetTick>
 80016c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c8:	f7ff fa76 	bl	8000bb8 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1c0      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016da:	4b92      	ldr	r3, [pc, #584]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8081 	beq.w	80017f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001928 <HAL_RCC_OscConfig+0x770>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a8b      	ldr	r2, [pc, #556]	@ (8001928 <HAL_RCC_OscConfig+0x770>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001700:	f7ff fa5a 	bl	8000bb8 <HAL_GetTick>
 8001704:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001708:	f7ff fa56 	bl	8000bb8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	@ 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1a0      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800171a:	4b83      	ldr	r3, [pc, #524]	@ (8001928 <HAL_RCC_OscConfig+0x770>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d106      	bne.n	800173c <HAL_RCC_OscConfig+0x584>
 800172e:	4b7d      	ldr	r3, [pc, #500]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001732:	4a7c      	ldr	r2, [pc, #496]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6713      	str	r3, [r2, #112]	@ 0x70
 800173a:	e02d      	b.n	8001798 <HAL_RCC_OscConfig+0x5e0>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10c      	bne.n	800175e <HAL_RCC_OscConfig+0x5a6>
 8001744:	4b77      	ldr	r3, [pc, #476]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001748:	4a76      	ldr	r2, [pc, #472]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001750:	4b74      	ldr	r3, [pc, #464]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001754:	4a73      	ldr	r2, [pc, #460]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001756:	f023 0304 	bic.w	r3, r3, #4
 800175a:	6713      	str	r3, [r2, #112]	@ 0x70
 800175c:	e01c      	b.n	8001798 <HAL_RCC_OscConfig+0x5e0>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b05      	cmp	r3, #5
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x5c8>
 8001766:	4b6f      	ldr	r3, [pc, #444]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176a:	4a6e      	ldr	r2, [pc, #440]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6713      	str	r3, [r2, #112]	@ 0x70
 8001772:	4b6c      	ldr	r3, [pc, #432]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	4a6b      	ldr	r2, [pc, #428]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	@ 0x70
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0x5e0>
 8001780:	4b68      	ldr	r3, [pc, #416]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001784:	4a67      	ldr	r2, [pc, #412]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6713      	str	r3, [r2, #112]	@ 0x70
 800178c:	4b65      	ldr	r3, [pc, #404]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001790:	4a64      	ldr	r2, [pc, #400]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001792:	f023 0304 	bic.w	r3, r3, #4
 8001796:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d015      	beq.n	80017cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fa0a 	bl	8000bb8 <HAL_GetTick>
 80017a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff fa06 	bl	8000bb8 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e14e      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017be:	4b59      	ldr	r3, [pc, #356]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0ee      	beq.n	80017a8 <HAL_RCC_OscConfig+0x5f0>
 80017ca:	e014      	b.n	80017f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff f9f4 	bl	8000bb8 <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff f9f0 	bl	8000bb8 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e138      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ee      	bne.n	80017d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 812d 	beq.w	8001a5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001800:	4b48      	ldr	r3, [pc, #288]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001808:	2b18      	cmp	r3, #24
 800180a:	f000 80bd 	beq.w	8001988 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	2b02      	cmp	r3, #2
 8001814:	f040 809e 	bne.w	8001954 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001818:	4b42      	ldr	r3, [pc, #264]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a41      	ldr	r2, [pc, #260]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 800181e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff f9c8 	bl	8000bb8 <HAL_GetTick>
 8001828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182c:	f7ff f9c4 	bl	8000bb8 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e10e      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800183e:	4b39      	ldr	r3, [pc, #228]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800184a:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 800184c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800184e:	4b37      	ldr	r3, [pc, #220]	@ (800192c <HAL_RCC_OscConfig+0x774>)
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	430a      	orrs	r2, r1
 800185e:	4931      	ldr	r1, [pc, #196]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001860:	4313      	orrs	r3, r2
 8001862:	628b      	str	r3, [r1, #40]	@ 0x28
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001868:	3b01      	subs	r3, #1
 800186a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001872:	3b01      	subs	r3, #1
 8001874:	025b      	lsls	r3, r3, #9
 8001876:	b29b      	uxth	r3, r3
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800187e:	3b01      	subs	r3, #1
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188c:	3b01      	subs	r3, #1
 800188e:	061b      	lsls	r3, r3, #24
 8001890:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001894:	4923      	ldr	r1, [pc, #140]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001896:	4313      	orrs	r3, r2
 8001898:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800189a:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 800189c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189e:	4a21      	ldr	r2, [pc, #132]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <HAL_RCC_OscConfig+0x778>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018b2:	00d2      	lsls	r2, r2, #3
 80018b4:	491b      	ldr	r1, [pc, #108]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	f023 020c 	bic.w	r2, r3, #12
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	4917      	ldr	r1, [pc, #92]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018cc:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	f023 0202 	bic.w	r2, r3, #2
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d8:	4912      	ldr	r1, [pc, #72]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018de:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e2:	4a10      	ldr	r2, [pc, #64]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001900:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001906:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800190e:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <HAL_RCC_OscConfig+0x76c>)
 8001914:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff f94d 	bl	8000bb8 <HAL_GetTick>
 800191e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001920:	e011      	b.n	8001946 <HAL_RCC_OscConfig+0x78e>
 8001922:	bf00      	nop
 8001924:	58024400 	.word	0x58024400
 8001928:	58024800 	.word	0x58024800
 800192c:	fffffc0c 	.word	0xfffffc0c
 8001930:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff f940 	bl	8000bb8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e08a      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001946:	4b47      	ldr	r3, [pc, #284]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x77c>
 8001952:	e082      	b.n	8001a5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b43      	ldr	r3, [pc, #268]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a42      	ldr	r2, [pc, #264]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 800195a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f92a 	bl	8000bb8 <HAL_GetTick>
 8001964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f926 	bl	8000bb8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e070      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800197a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x7b0>
 8001986:	e068      	b.n	8001a5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001988:	4b36      	ldr	r3, [pc, #216]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800198e:	4b35      	ldr	r3, [pc, #212]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001998:	2b01      	cmp	r3, #1
 800199a:	d031      	beq.n	8001a00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0203 	and.w	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d12a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d122      	bne.n	8001a00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d11a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d111      	bne.n	8001a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	0e1b      	lsrs	r3, r3, #24
 80019f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e02b      	b.n	8001a5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 8001a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a08:	08db      	lsrs	r3, r3, #3
 8001a0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d01f      	beq.n	8001a5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	4a11      	ldr	r2, [pc, #68]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a26:	f7ff f8c7 	bl	8000bb8 <HAL_GetTick>
 8001a2a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a2c:	bf00      	nop
 8001a2e:	f7ff f8c3 	bl	8000bb8 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d0f9      	beq.n	8001a2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 8001a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_RCC_OscConfig+0x8b0>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a46:	00d2      	lsls	r2, r2, #3
 8001a48:	4906      	ldr	r1, [pc, #24]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 8001a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a52:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <HAL_RCC_OscConfig+0x8ac>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3730      	adds	r7, #48	@ 0x30
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	58024400 	.word	0x58024400
 8001a68:	ffff0007 	.word	0xffff0007

08001a6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e19c      	b.n	8001dba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b8a      	ldr	r3, [pc, #552]	@ (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d910      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b87      	ldr	r3, [pc, #540]	@ (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 020f 	bic.w	r2, r3, #15
 8001a96:	4985      	ldr	r1, [pc, #532]	@ (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b83      	ldr	r3, [pc, #524]	@ (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e184      	b.n	8001dba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	4b7b      	ldr	r3, [pc, #492]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d908      	bls.n	8001ade <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001acc:	4b78      	ldr	r3, [pc, #480]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	4975      	ldr	r1, [pc, #468]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d010      	beq.n	8001b0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	4b70      	ldr	r3, [pc, #448]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d908      	bls.n	8001b0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001afa:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	496a      	ldr	r1, [pc, #424]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d010      	beq.n	8001b3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	4b64      	ldr	r3, [pc, #400]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d908      	bls.n	8001b3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b28:	4b61      	ldr	r3, [pc, #388]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	495e      	ldr	r1, [pc, #376]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d010      	beq.n	8001b68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69da      	ldr	r2, [r3, #28]
 8001b4a:	4b59      	ldr	r3, [pc, #356]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d908      	bls.n	8001b68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b56:	4b56      	ldr	r3, [pc, #344]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	4953      	ldr	r1, [pc, #332]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d010      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d908      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b84:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f023 020f 	bic.w	r2, r3, #15
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4947      	ldr	r1, [pc, #284]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d055      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ba2:	4b43      	ldr	r3, [pc, #268]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	4940      	ldr	r1, [pc, #256]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d107      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bbc:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d121      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0f6      	b.n	8001dba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bd4:	4b36      	ldr	r3, [pc, #216]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d115      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0ea      	b.n	8001dba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bec:	4b30      	ldr	r3, [pc, #192]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0de      	b.n	8001dba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0d6      	b.n	8001dba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c0c:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f023 0207 	bic.w	r2, r3, #7
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4925      	ldr	r1, [pc, #148]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c1e:	f7fe ffcb 	bl	8000bb8 <HAL_GetTick>
 8001c22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c26:	f7fe ffc7 	bl	8000bb8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0be      	b.n	8001dba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d1eb      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d010      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d208      	bcs.n	8001c7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f023 020f 	bic.w	r2, r3, #15
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	490e      	ldr	r1, [pc, #56]	@ (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d214      	bcs.n	8001cb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 020f 	bic.w	r2, r3, #15
 8001c92:	4906      	ldr	r1, [pc, #24]	@ (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e086      	b.n	8001dba <HAL_RCC_ClockConfig+0x34e>
 8001cac:	52002000 	.word	0x52002000
 8001cb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d208      	bcs.n	8001ce2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	4939      	ldr	r1, [pc, #228]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d010      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	4b34      	ldr	r3, [pc, #208]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d208      	bcs.n	8001d10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cfe:	4b31      	ldr	r3, [pc, #196]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	492e      	ldr	r1, [pc, #184]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d010      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	4b28      	ldr	r3, [pc, #160]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d208      	bcs.n	8001d3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d2c:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4922      	ldr	r1, [pc, #136]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d010      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d208      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4917      	ldr	r1, [pc, #92]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d6c:	f000 f834 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	4912      	ldr	r1, [pc, #72]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
 8001d88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <HAL_RCC_ClockConfig+0x358>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc8 <HAL_RCC_ClockConfig+0x35c>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001da0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <HAL_RCC_ClockConfig+0x360>)
 8001da2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001da4:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <HAL_RCC_ClockConfig+0x364>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001daa:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <HAL_RCC_ClockConfig+0x368>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fecc 	bl	8000b4c <HAL_InitTick>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	58024400 	.word	0x58024400
 8001dc8:	080040c0 	.word	0x080040c0
 8001dcc:	24000004 	.word	0x24000004
 8001dd0:	24000000 	.word	0x24000000
 8001dd4:	24000008 	.word	0x24000008

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dde:	4bb3      	ldr	r3, [pc, #716]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001de6:	2b18      	cmp	r3, #24
 8001de8:	f200 8155 	bhi.w	8002096 <HAL_RCC_GetSysClockFreq+0x2be>
 8001dec:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df2:	bf00      	nop
 8001df4:	08001e59 	.word	0x08001e59
 8001df8:	08002097 	.word	0x08002097
 8001dfc:	08002097 	.word	0x08002097
 8001e00:	08002097 	.word	0x08002097
 8001e04:	08002097 	.word	0x08002097
 8001e08:	08002097 	.word	0x08002097
 8001e0c:	08002097 	.word	0x08002097
 8001e10:	08002097 	.word	0x08002097
 8001e14:	08001e7f 	.word	0x08001e7f
 8001e18:	08002097 	.word	0x08002097
 8001e1c:	08002097 	.word	0x08002097
 8001e20:	08002097 	.word	0x08002097
 8001e24:	08002097 	.word	0x08002097
 8001e28:	08002097 	.word	0x08002097
 8001e2c:	08002097 	.word	0x08002097
 8001e30:	08002097 	.word	0x08002097
 8001e34:	08001e85 	.word	0x08001e85
 8001e38:	08002097 	.word	0x08002097
 8001e3c:	08002097 	.word	0x08002097
 8001e40:	08002097 	.word	0x08002097
 8001e44:	08002097 	.word	0x08002097
 8001e48:	08002097 	.word	0x08002097
 8001e4c:	08002097 	.word	0x08002097
 8001e50:	08002097 	.word	0x08002097
 8001e54:	08001e8b 	.word	0x08001e8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e58:	4b94      	ldr	r3, [pc, #592]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e64:	4b91      	ldr	r3, [pc, #580]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	08db      	lsrs	r3, r3, #3
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	4a90      	ldr	r2, [pc, #576]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
 8001e74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e76:	e111      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e78:	4b8d      	ldr	r3, [pc, #564]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e7a:	61bb      	str	r3, [r7, #24]
      break;
 8001e7c:	e10e      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e80:	61bb      	str	r3, [r7, #24]
      break;
 8001e82:	e10b      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e84:	4b8c      	ldr	r3, [pc, #560]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e86:	61bb      	str	r3, [r7, #24]
      break;
 8001e88:	e108      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e8a:	4b88      	ldr	r3, [pc, #544]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e94:	4b85      	ldr	r3, [pc, #532]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ea0:	4b82      	ldr	r3, [pc, #520]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001eaa:	4b80      	ldr	r3, [pc, #512]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eae:	08db      	lsrs	r3, r3, #3
 8001eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80e1 	beq.w	8002090 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	f000 8083 	beq.w	8001fdc <HAL_RCC_GetSysClockFreq+0x204>
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	f200 80a1 	bhi.w	8002020 <HAL_RCC_GetSysClockFreq+0x248>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x114>
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d056      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001eea:	e099      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001eec:	4b6f      	ldr	r3, [pc, #444]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d02d      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	08db      	lsrs	r3, r3, #3
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	4a6b      	ldr	r2, [pc, #428]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f22:	4b62      	ldr	r3, [pc, #392]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f36:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80020bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f52:	e087      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f5e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80020c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f66:	4b51      	ldr	r3, [pc, #324]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f7a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80020bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f96:	e065      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80020c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001faa:	4b40      	ldr	r3, [pc, #256]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fbe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80020bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fda:	e043      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80020c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fee:	4b2f      	ldr	r3, [pc, #188]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002002:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80020bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800200a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800200e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800201e:	e021      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80020c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800202e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002032:	4b1e      	ldr	r3, [pc, #120]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002042:	ed97 6a02 	vldr	s12, [r7, #8]
 8002046:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80020bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800204a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800204e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002062:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002068:	0a5b      	lsrs	r3, r3, #9
 800206a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800206e:	3301      	adds	r3, #1
 8002070:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800207c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002088:	ee17 3a90 	vmov	r3, s15
 800208c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800208e:	e005      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
      break;
 8002094:	e002      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002096:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002098:	61bb      	str	r3, [r7, #24]
      break;
 800209a:	bf00      	nop
  }

  return sysclockfreq;
 800209c:	69bb      	ldr	r3, [r7, #24]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	@ 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	58024400 	.word	0x58024400
 80020b0:	03d09000 	.word	0x03d09000
 80020b4:	003d0900 	.word	0x003d0900
 80020b8:	017d7840 	.word	0x017d7840
 80020bc:	46000000 	.word	0x46000000
 80020c0:	4c742400 	.word	0x4c742400
 80020c4:	4a742400 	.word	0x4a742400
 80020c8:	4bbebc20 	.word	0x4bbebc20

080020cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f103 0208 	add.w	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f103 0208 	add.w	r2, r3, #8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f103 0208 	add.w	r2, r3, #8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	601a      	str	r2, [r3, #0]
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6892      	ldr	r2, [r2, #8]
 8002184:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6852      	ldr	r2, [r2, #4]
 800218e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	429a      	cmp	r2, r3
 8002198:	d103      	bne.n	80021a2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1e5a      	subs	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b08c      	sub	sp, #48	@ 0x30
 80021c6:	af04      	add	r7, sp, #16
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fe0a 	bl	8002df0 <pvPortMalloc>
 80021dc:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00e      	beq.n	8002202 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021e4:	205c      	movs	r0, #92	@ 0x5c
 80021e6:	f000 fe03 	bl	8002df0 <pvPortMalloc>
 80021ea:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80021f8:	e005      	b.n	8002206 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f000 fee0 	bl	8002fc0 <vPortFree>
 8002200:	e001      	b.n	8002206 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	2300      	movs	r3, #0
 8002210:	9303      	str	r3, [sp, #12]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f80e 	bl	8002244 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002228:	69f8      	ldr	r0, [r7, #28]
 800222a:	f000 f8a5 	bl	8002378 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800222e:	2301      	movs	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	e002      	b.n	800223a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002234:	f04f 33ff 	mov.w	r3, #4294967295
 8002238:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800223a:	69bb      	ldr	r3, [r7, #24]
    }
 800223c:	4618      	mov	r0, r3
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002254:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	461a      	mov	r2, r3
 800225c:	21a5      	movs	r1, #165	@ 0xa5
 800225e:	f001 f8ea 	bl	8003436 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800226c:	440b      	add	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f023 0307 	bic.w	r3, r3, #7
 800227a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <prvInitialiseNewTask+0x5e>
        __asm volatile
 8002286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800228a:	b672      	cpsid	i
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	b662      	cpsie	i
 800229a:	617b      	str	r3, [r7, #20]
    }
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	e7fd      	b.n	800229e <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01f      	beq.n	80022e8 <prvInitialiseNewTask+0xa4>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	e012      	b.n	80022d4 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	4413      	add	r3, r2
 80022b4:	7819      	ldrb	r1, [r3, #0]
 80022b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	4413      	add	r3, r2
 80022bc:	3334      	adds	r3, #52	@ 0x34
 80022be:	460a      	mov	r2, r1
 80022c0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b0f      	cmp	r3, #15
 80022d8:	d9e9      	bls.n	80022ae <prvInitialiseNewTask+0x6a>
 80022da:	e000      	b.n	80022de <prvInitialiseNewTask+0x9a>
            {
                break;
 80022dc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022e6:	e003      	b.n	80022f0 <prvInitialiseNewTask+0xac>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d901      	bls.n	80022fa <prvInitialiseNewTask+0xb6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022f6:	2306      	movs	r3, #6
 80022f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002304:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8002306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002308:	2200      	movs	r2, #0
 800230a:	651a      	str	r2, [r3, #80]	@ 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800230c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230e:	3304      	adds	r3, #4
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fefb 	bl	800210c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002318:	3318      	adds	r3, #24
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fef6 	bl	800210c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002324:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002328:	f1c3 0207 	rsb	r2, r3, #7
 800232c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002338:	3354      	adds	r3, #84	@ 0x54
 800233a:	2204      	movs	r2, #4
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f001 f879 	bl	8003436 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002346:	3358      	adds	r3, #88	@ 0x58
 8002348:	2201      	movs	r2, #1
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f001 f872 	bl	8003436 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	68f9      	ldr	r1, [r7, #12]
 8002356:	69b8      	ldr	r0, [r7, #24]
 8002358:	f000 fb46 	bl	80029e8 <pxPortInitialiseStack>
 800235c:	4602      	mov	r2, r0
 800235e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002360:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <prvInitialiseNewTask+0x12a>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800236c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800236e:	bf00      	nop
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002380:	f000 fc46 	bl	8002c10 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002384:	4b2c      	ldr	r3, [pc, #176]	@ (8002438 <prvAddNewTaskToReadyList+0xc0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	4a2b      	ldr	r2, [pc, #172]	@ (8002438 <prvAddNewTaskToReadyList+0xc0>)
 800238c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800238e:	4b2b      	ldr	r3, [pc, #172]	@ (800243c <prvAddNewTaskToReadyList+0xc4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002396:	4a29      	ldr	r2, [pc, #164]	@ (800243c <prvAddNewTaskToReadyList+0xc4>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800239c:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <prvAddNewTaskToReadyList+0xc0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d110      	bne.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023a4:	f000 fa86 	bl	80028b4 <prvInitialiseTaskLists>
 80023a8:	e00d      	b.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023aa:	4b25      	ldr	r3, [pc, #148]	@ (8002440 <prvAddNewTaskToReadyList+0xc8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023b2:	4b22      	ldr	r3, [pc, #136]	@ (800243c <prvAddNewTaskToReadyList+0xc4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	429a      	cmp	r2, r3
 80023be:	d802      	bhi.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023c0:	4a1e      	ldr	r2, [pc, #120]	@ (800243c <prvAddNewTaskToReadyList+0xc4>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <prvAddNewTaskToReadyList+0xcc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002444 <prvAddNewTaskToReadyList+0xcc>)
 80023ce:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <prvAddNewTaskToReadyList+0xcc>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	2201      	movs	r2, #1
 80023de:	409a      	lsls	r2, r3
 80023e0:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <prvAddNewTaskToReadyList+0xd0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	4a18      	ldr	r2, [pc, #96]	@ (8002448 <prvAddNewTaskToReadyList+0xd0>)
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4a15      	ldr	r2, [pc, #84]	@ (800244c <prvAddNewTaskToReadyList+0xd4>)
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f7ff fe90 	bl	8002126 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002406:	f000 fc39 	bl	8002c7c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800240a:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <prvAddNewTaskToReadyList+0xc8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00e      	beq.n	8002430 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002412:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <prvAddNewTaskToReadyList+0xc4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241c:	429a      	cmp	r2, r3
 800241e:	d207      	bcs.n	8002430 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <prvAddNewTaskToReadyList+0xd8>)
 8002422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	24000198 	.word	0x24000198
 800243c:	24000098 	.word	0x24000098
 8002440:	240001a4 	.word	0x240001a4
 8002444:	240001b4 	.word	0x240001b4
 8002448:	240001a0 	.word	0x240001a0
 800244c:	2400009c 	.word	0x2400009c
 8002450:	e000ed04 	.word	0xe000ed04

08002454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800245a:	4b1f      	ldr	r3, [pc, #124]	@ (80024d8 <vTaskStartScheduler+0x84>)
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	2300      	movs	r3, #0
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	2280      	movs	r2, #128	@ 0x80
 8002466:	491d      	ldr	r1, [pc, #116]	@ (80024dc <vTaskStartScheduler+0x88>)
 8002468:	481d      	ldr	r0, [pc, #116]	@ (80024e0 <vTaskStartScheduler+0x8c>)
 800246a:	f7ff feaa 	bl	80021c2 <xTaskCreate>
 800246e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d118      	bne.n	80024a8 <vTaskStartScheduler+0x54>
        __asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800247a:	b672      	cpsid	i
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	b662      	cpsie	i
 800248a:	60bb      	str	r3, [r7, #8]
    }
 800248c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800248e:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <vTaskStartScheduler+0x90>)
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002496:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <vTaskStartScheduler+0x94>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <vTaskStartScheduler+0x98>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80024a2:	f000 fb37 	bl	8002b14 <xPortStartScheduler>
 80024a6:	e011      	b.n	80024cc <vTaskStartScheduler+0x78>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ae:	d10d      	bne.n	80024cc <vTaskStartScheduler+0x78>
        __asm volatile
 80024b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b4:	b672      	cpsid	i
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	b662      	cpsie	i
 80024c4:	607b      	str	r3, [r7, #4]
    }
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024cc:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <vTaskStartScheduler+0x9c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	240001bc 	.word	0x240001bc
 80024dc:	080040b8 	.word	0x080040b8
 80024e0:	08002885 	.word	0x08002885
 80024e4:	240001b8 	.word	0x240001b8
 80024e8:	240001a4 	.word	0x240001a4
 80024ec:	2400019c 	.word	0x2400019c
 80024f0:	24000010 	.word	0x24000010

080024f4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80024f8:	4b04      	ldr	r3, [pc, #16]	@ (800250c <vTaskSuspendAll+0x18>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	4a03      	ldr	r2, [pc, #12]	@ (800250c <vTaskSuspendAll+0x18>)
 8002500:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	240001c0 	.word	0x240001c0

08002510 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800251e:	4b43      	ldr	r3, [pc, #268]	@ (800262c <xTaskResumeAll+0x11c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10d      	bne.n	8002542 <xTaskResumeAll+0x32>
        __asm volatile
 8002526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800252a:	b672      	cpsid	i
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	b662      	cpsie	i
 800253a:	603b      	str	r3, [r7, #0]
    }
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	e7fd      	b.n	800253e <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002542:	f000 fb65 	bl	8002c10 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002546:	4b39      	ldr	r3, [pc, #228]	@ (800262c <xTaskResumeAll+0x11c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3b01      	subs	r3, #1
 800254c:	4a37      	ldr	r2, [pc, #220]	@ (800262c <xTaskResumeAll+0x11c>)
 800254e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002550:	4b36      	ldr	r3, [pc, #216]	@ (800262c <xTaskResumeAll+0x11c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d161      	bne.n	800261c <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002558:	4b35      	ldr	r3, [pc, #212]	@ (8002630 <xTaskResumeAll+0x120>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d05d      	beq.n	800261c <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002560:	e02e      	b.n	80025c0 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002562:	4b34      	ldr	r3, [pc, #208]	@ (8002634 <xTaskResumeAll+0x124>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3318      	adds	r3, #24
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fdfd 	bl	800216e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3304      	adds	r3, #4
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fdf8 	bl	800216e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002582:	2201      	movs	r2, #1
 8002584:	409a      	lsls	r2, r3
 8002586:	4b2c      	ldr	r3, [pc, #176]	@ (8002638 <xTaskResumeAll+0x128>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	4a2a      	ldr	r2, [pc, #168]	@ (8002638 <xTaskResumeAll+0x128>)
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4a27      	ldr	r2, [pc, #156]	@ (800263c <xTaskResumeAll+0x12c>)
 800259e:	441a      	add	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3304      	adds	r3, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f7ff fdbd 	bl	8002126 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b0:	4b23      	ldr	r3, [pc, #140]	@ (8002640 <xTaskResumeAll+0x130>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 80025ba:	4b22      	ldr	r3, [pc, #136]	@ (8002644 <xTaskResumeAll+0x134>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002634 <xTaskResumeAll+0x124>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1cc      	bne.n	8002562 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80025ce:	f000 f9ef 	bl	80029b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <xTaskResumeAll+0x138>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d010      	beq.n	8002600 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025de:	f000 f837 	bl	8002650 <xTaskIncrementTick>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 80025e8:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <xTaskResumeAll+0x134>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f1      	bne.n	80025de <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 80025fa:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <xTaskResumeAll+0x138>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002600:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <xTaskResumeAll+0x134>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002608:	2301      	movs	r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800260c:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <xTaskResumeAll+0x13c>)
 800260e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800261c:	f000 fb2e 	bl	8002c7c <vPortExitCritical>

    return xAlreadyYielded;
 8002620:	68bb      	ldr	r3, [r7, #8]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	240001c0 	.word	0x240001c0
 8002630:	24000198 	.word	0x24000198
 8002634:	24000158 	.word	0x24000158
 8002638:	240001a0 	.word	0x240001a0
 800263c:	2400009c 	.word	0x2400009c
 8002640:	24000098 	.word	0x24000098
 8002644:	240001ac 	.word	0x240001ac
 8002648:	240001a8 	.word	0x240001a8
 800264c:	e000ed04 	.word	0xe000ed04

08002650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800265a:	4b50      	ldr	r3, [pc, #320]	@ (800279c <xTaskIncrementTick+0x14c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 8091 	bne.w	8002786 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002664:	4b4e      	ldr	r3, [pc, #312]	@ (80027a0 <xTaskIncrementTick+0x150>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800266c:	4a4c      	ldr	r2, [pc, #304]	@ (80027a0 <xTaskIncrementTick+0x150>)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d123      	bne.n	80026c0 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8002678:	4b4a      	ldr	r3, [pc, #296]	@ (80027a4 <xTaskIncrementTick+0x154>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <xTaskIncrementTick+0x4e>
        __asm volatile
 8002682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002686:	b672      	cpsid	i
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	b662      	cpsie	i
 8002696:	603b      	str	r3, [r7, #0]
    }
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	e7fd      	b.n	800269a <xTaskIncrementTick+0x4a>
 800269e:	4b41      	ldr	r3, [pc, #260]	@ (80027a4 <xTaskIncrementTick+0x154>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	4b40      	ldr	r3, [pc, #256]	@ (80027a8 <xTaskIncrementTick+0x158>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a3e      	ldr	r2, [pc, #248]	@ (80027a4 <xTaskIncrementTick+0x154>)
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4a3e      	ldr	r2, [pc, #248]	@ (80027a8 <xTaskIncrementTick+0x158>)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b3e      	ldr	r3, [pc, #248]	@ (80027ac <xTaskIncrementTick+0x15c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	4a3c      	ldr	r2, [pc, #240]	@ (80027ac <xTaskIncrementTick+0x15c>)
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	f000 f978 	bl	80029b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80026c0:	4b3b      	ldr	r3, [pc, #236]	@ (80027b0 <xTaskIncrementTick+0x160>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d348      	bcc.n	800275c <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026ca:	4b36      	ldr	r3, [pc, #216]	@ (80027a4 <xTaskIncrementTick+0x154>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d104      	bne.n	80026de <xTaskIncrementTick+0x8e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026d4:	4b36      	ldr	r3, [pc, #216]	@ (80027b0 <xTaskIncrementTick+0x160>)
 80026d6:	f04f 32ff 	mov.w	r2, #4294967295
 80026da:	601a      	str	r2, [r3, #0]
                    break;
 80026dc:	e03e      	b.n	800275c <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026de:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <xTaskIncrementTick+0x154>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d203      	bcs.n	80026fe <xTaskIncrementTick+0xae>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026f6:	4a2e      	ldr	r2, [pc, #184]	@ (80027b0 <xTaskIncrementTick+0x160>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026fc:	e02e      	b.n	800275c <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3304      	adds	r3, #4
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fd33 	bl	800216e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <xTaskIncrementTick+0xca>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	3318      	adds	r3, #24
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fd2a 	bl	800216e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271e:	2201      	movs	r2, #1
 8002720:	409a      	lsls	r2, r3
 8002722:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <xTaskIncrementTick+0x164>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	4a22      	ldr	r2, [pc, #136]	@ (80027b4 <xTaskIncrementTick+0x164>)
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4a1f      	ldr	r2, [pc, #124]	@ (80027b8 <xTaskIncrementTick+0x168>)
 800273a:	441a      	add	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3304      	adds	r3, #4
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f7ff fcef 	bl	8002126 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800274c:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <xTaskIncrementTick+0x16c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	429a      	cmp	r2, r3
 8002754:	d3b9      	bcc.n	80026ca <xTaskIncrementTick+0x7a>
                            {
                                xSwitchRequired = pdTRUE;
 8002756:	2301      	movs	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800275a:	e7b6      	b.n	80026ca <xTaskIncrementTick+0x7a>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800275c:	4b17      	ldr	r3, [pc, #92]	@ (80027bc <xTaskIncrementTick+0x16c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002762:	4915      	ldr	r1, [pc, #84]	@ (80027b8 <xTaskIncrementTick+0x168>)
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d901      	bls.n	8002778 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8002774:	2301      	movs	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002778:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <xTaskIncrementTick+0x170>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8002780:	2301      	movs	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e004      	b.n	8002790 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002786:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <xTaskIncrementTick+0x174>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	4a0d      	ldr	r2, [pc, #52]	@ (80027c4 <xTaskIncrementTick+0x174>)
 800278e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002790:	697b      	ldr	r3, [r7, #20]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	240001c0 	.word	0x240001c0
 80027a0:	2400019c 	.word	0x2400019c
 80027a4:	24000150 	.word	0x24000150
 80027a8:	24000154 	.word	0x24000154
 80027ac:	240001b0 	.word	0x240001b0
 80027b0:	240001b8 	.word	0x240001b8
 80027b4:	240001a0 	.word	0x240001a0
 80027b8:	2400009c 	.word	0x2400009c
 80027bc:	24000098 	.word	0x24000098
 80027c0:	240001ac 	.word	0x240001ac
 80027c4:	240001a8 	.word	0x240001a8

080027c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027ce:	4b28      	ldr	r3, [pc, #160]	@ (8002870 <vTaskSwitchContext+0xa8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80027d6:	4b27      	ldr	r3, [pc, #156]	@ (8002874 <vTaskSwitchContext+0xac>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80027dc:	e042      	b.n	8002864 <vTaskSwitchContext+0x9c>
        xYieldPending = pdFALSE;
 80027de:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <vTaskSwitchContext+0xac>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027e4:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <vTaskSwitchContext+0xb0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80027f2:	7afb      	ldrb	r3, [r7, #11]
 80027f4:	f1c3 031f 	rsb	r3, r3, #31
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	4920      	ldr	r1, [pc, #128]	@ (800287c <vTaskSwitchContext+0xb4>)
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10d      	bne.n	800282a <vTaskSwitchContext+0x62>
        __asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002812:	b672      	cpsid	i
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	b662      	cpsie	i
 8002822:	607b      	str	r3, [r7, #4]
    }
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	e7fd      	b.n	8002826 <vTaskSwitchContext+0x5e>
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4a11      	ldr	r2, [pc, #68]	@ (800287c <vTaskSwitchContext+0xb4>)
 8002836:	4413      	add	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	3308      	adds	r3, #8
 800284c:	429a      	cmp	r2, r3
 800284e:	d104      	bne.n	800285a <vTaskSwitchContext+0x92>
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a07      	ldr	r2, [pc, #28]	@ (8002880 <vTaskSwitchContext+0xb8>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	240001c0 	.word	0x240001c0
 8002874:	240001ac 	.word	0x240001ac
 8002878:	240001a0 	.word	0x240001a0
 800287c:	2400009c 	.word	0x2400009c
 8002880:	24000098 	.word	0x24000098

08002884 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800288c:	f000 f852 	bl	8002934 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <prvIdleTask+0x28>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d9f9      	bls.n	800288c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <prvIdleTask+0x2c>)
 800289a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80028a8:	e7f0      	b.n	800288c <prvIdleTask+0x8>
 80028aa:	bf00      	nop
 80028ac:	2400009c 	.word	0x2400009c
 80028b0:	e000ed04 	.word	0xe000ed04

080028b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	e00c      	b.n	80028da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4a12      	ldr	r2, [pc, #72]	@ (8002914 <prvInitialiseTaskLists+0x60>)
 80028cc:	4413      	add	r3, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fbfc 	bl	80020cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3301      	adds	r3, #1
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d9ef      	bls.n	80028c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80028e0:	480d      	ldr	r0, [pc, #52]	@ (8002918 <prvInitialiseTaskLists+0x64>)
 80028e2:	f7ff fbf3 	bl	80020cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80028e6:	480d      	ldr	r0, [pc, #52]	@ (800291c <prvInitialiseTaskLists+0x68>)
 80028e8:	f7ff fbf0 	bl	80020cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80028ec:	480c      	ldr	r0, [pc, #48]	@ (8002920 <prvInitialiseTaskLists+0x6c>)
 80028ee:	f7ff fbed 	bl	80020cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80028f2:	480c      	ldr	r0, [pc, #48]	@ (8002924 <prvInitialiseTaskLists+0x70>)
 80028f4:	f7ff fbea 	bl	80020cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80028f8:	480b      	ldr	r0, [pc, #44]	@ (8002928 <prvInitialiseTaskLists+0x74>)
 80028fa:	f7ff fbe7 	bl	80020cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80028fe:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <prvInitialiseTaskLists+0x78>)
 8002900:	4a05      	ldr	r2, [pc, #20]	@ (8002918 <prvInitialiseTaskLists+0x64>)
 8002902:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002904:	4b0a      	ldr	r3, [pc, #40]	@ (8002930 <prvInitialiseTaskLists+0x7c>)
 8002906:	4a05      	ldr	r2, [pc, #20]	@ (800291c <prvInitialiseTaskLists+0x68>)
 8002908:	601a      	str	r2, [r3, #0]
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	2400009c 	.word	0x2400009c
 8002918:	24000128 	.word	0x24000128
 800291c:	2400013c 	.word	0x2400013c
 8002920:	24000158 	.word	0x24000158
 8002924:	2400016c 	.word	0x2400016c
 8002928:	24000184 	.word	0x24000184
 800292c:	24000150 	.word	0x24000150
 8002930:	24000154 	.word	0x24000154

08002934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800293a:	e019      	b.n	8002970 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800293c:	f000 f968 	bl	8002c10 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002940:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <prvCheckTasksWaitingTermination+0x50>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3304      	adds	r3, #4
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fc0e 	bl	800216e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <prvCheckTasksWaitingTermination+0x54>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3b01      	subs	r3, #1
 8002958:	4a0b      	ldr	r2, [pc, #44]	@ (8002988 <prvCheckTasksWaitingTermination+0x54>)
 800295a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <prvCheckTasksWaitingTermination+0x58>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3b01      	subs	r3, #1
 8002962:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <prvCheckTasksWaitingTermination+0x58>)
 8002964:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002966:	f000 f989 	bl	8002c7c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f810 	bl	8002990 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <prvCheckTasksWaitingTermination+0x58>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e1      	bne.n	800293c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	2400016c 	.word	0x2400016c
 8002988:	24000198 	.word	0x24000198
 800298c:	24000180 	.word	0x24000180

08002990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fb0f 	bl	8002fc0 <vPortFree>
                vPortFree( pxTCB );
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fb0c 	bl	8002fc0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029b4:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <prvResetNextTaskUnblockTime+0x30>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <prvResetNextTaskUnblockTime+0x34>)
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029c6:	e005      	b.n	80029d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <prvResetNextTaskUnblockTime+0x30>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a04      	ldr	r2, [pc, #16]	@ (80029e4 <prvResetNextTaskUnblockTime+0x34>)
 80029d2:	6013      	str	r3, [r2, #0]
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	24000150 	.word	0x24000150
 80029e4:	240001b8 	.word	0x240001b8

080029e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3b04      	subs	r3, #4
 80029f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3b04      	subs	r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f023 0201 	bic.w	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3b04      	subs	r3, #4
 8002a16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a18:	4a0c      	ldr	r2, [pc, #48]	@ (8002a4c <pxPortInitialiseStack+0x64>)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3b14      	subs	r3, #20
 8002a22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3b04      	subs	r3, #4
 8002a2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f06f 0202 	mvn.w	r2, #2
 8002a36:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3b20      	subs	r3, #32
 8002a3c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	08002a51 	.word	0x08002a51

08002a50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a5a:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <prvTaskExitError+0x60>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d00d      	beq.n	8002a80 <prvTaskExitError+0x30>
        __asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a68:	b672      	cpsid	i
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	b662      	cpsie	i
 8002a78:	60fb      	str	r3, [r7, #12]
    }
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <prvTaskExitError+0x2c>
        __asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a84:	b672      	cpsid	i
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	b662      	cpsie	i
 8002a94:	60bb      	str	r3, [r7, #8]
    }
 8002a96:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a98:	bf00      	nop
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0fc      	beq.n	8002a9a <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	24000014 	.word	0x24000014
	...

08002ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ac0:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <pxCurrentTCBConst2>)
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	6808      	ldr	r0, [r1, #0]
 8002ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aca:	f380 8809 	msr	PSP, r0
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f04f 0000 	mov.w	r0, #0
 8002ad6:	f380 8811 	msr	BASEPRI, r0
 8002ada:	4770      	bx	lr
 8002adc:	f3af 8000 	nop.w

08002ae0 <pxCurrentTCBConst2>:
 8002ae0:	24000098 	.word	0x24000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop

08002ae8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ae8:	4808      	ldr	r0, [pc, #32]	@ (8002b0c <prvPortStartFirstTask+0x24>)
 8002aea:	6800      	ldr	r0, [r0, #0]
 8002aec:	6800      	ldr	r0, [r0, #0]
 8002aee:	f380 8808 	msr	MSP, r0
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f380 8814 	msr	CONTROL, r0
 8002afa:	b662      	cpsie	i
 8002afc:	b661      	cpsie	f
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	df00      	svc	0
 8002b08:	bf00      	nop
 8002b0a:	0000      	.short	0x0000
 8002b0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop

08002b14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <xPortStartScheduler+0xe4>)
 8002b1c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	22ff      	movs	r2, #255	@ 0xff
 8002b2a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002bfc <xPortStartScheduler+0xe8>)
 8002b40:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b42:	4b2f      	ldr	r3, [pc, #188]	@ (8002c00 <xPortStartScheduler+0xec>)
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b48:	e009      	b.n	8002b5e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c00 <xPortStartScheduler+0xec>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	4a2b      	ldr	r2, [pc, #172]	@ (8002c00 <xPortStartScheduler+0xec>)
 8002b52:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b66:	2b80      	cmp	r3, #128	@ 0x80
 8002b68:	d0ef      	beq.n	8002b4a <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b6a:	4b25      	ldr	r3, [pc, #148]	@ (8002c00 <xPortStartScheduler+0xec>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1c3 0307 	rsb	r3, r3, #7
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d00d      	beq.n	8002b92 <xPortStartScheduler+0x7e>
        __asm volatile
 8002b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7a:	b672      	cpsid	i
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	b662      	cpsie	i
 8002b8a:	60bb      	str	r3, [r7, #8]
    }
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	e7fd      	b.n	8002b8e <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b92:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <xPortStartScheduler+0xec>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	4a19      	ldr	r2, [pc, #100]	@ (8002c00 <xPortStartScheduler+0xec>)
 8002b9a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b9c:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <xPortStartScheduler+0xec>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ba4:	4a16      	ldr	r2, [pc, #88]	@ (8002c00 <xPortStartScheduler+0xec>)
 8002ba6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002bb0:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <xPortStartScheduler+0xf0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a13      	ldr	r2, [pc, #76]	@ (8002c04 <xPortStartScheduler+0xf0>)
 8002bb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <xPortStartScheduler+0xf0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a10      	ldr	r2, [pc, #64]	@ (8002c04 <xPortStartScheduler+0xf0>)
 8002bc2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002bc6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002bc8:	f000 f8e2 	bl	8002d90 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c08 <xPortStartScheduler+0xf4>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002bd2:	f000 f901 	bl	8002dd8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <xPortStartScheduler+0xf8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a0c      	ldr	r2, [pc, #48]	@ (8002c0c <xPortStartScheduler+0xf8>)
 8002bdc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002be0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002be2:	f7ff ff81 	bl	8002ae8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002be6:	f7ff fdef 	bl	80027c8 <vTaskSwitchContext>
    prvTaskExitError();
 8002bea:	f7ff ff31 	bl	8002a50 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	e000e400 	.word	0xe000e400
 8002bfc:	240001c4 	.word	0x240001c4
 8002c00:	240001c8 	.word	0x240001c8
 8002c04:	e000ed20 	.word	0xe000ed20
 8002c08:	24000014 	.word	0x24000014
 8002c0c:	e000ef34 	.word	0xe000ef34

08002c10 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
        __asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1a:	b672      	cpsid	i
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	b662      	cpsie	i
 8002c2a:	607b      	str	r3, [r7, #4]
    }
 8002c2c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002c2e:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <vPortEnterCritical+0x64>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3301      	adds	r3, #1
 8002c34:	4a0f      	ldr	r2, [pc, #60]	@ (8002c74 <vPortEnterCritical+0x64>)
 8002c36:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002c38:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <vPortEnterCritical+0x64>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d112      	bne.n	8002c66 <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c40:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <vPortEnterCritical+0x68>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <vPortEnterCritical+0x56>
        __asm volatile
 8002c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4e:	b672      	cpsid	i
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	b662      	cpsie	i
 8002c5e:	603b      	str	r3, [r7, #0]
    }
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	e7fd      	b.n	8002c62 <vPortEnterCritical+0x52>
    }
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	24000014 	.word	0x24000014
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002c82:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <vPortExitCritical+0x54>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10d      	bne.n	8002ca6 <vPortExitCritical+0x2a>
        __asm volatile
 8002c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8e:	b672      	cpsid	i
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	b662      	cpsie	i
 8002c9e:	607b      	str	r3, [r7, #4]
    }
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	e7fd      	b.n	8002ca2 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <vPortExitCritical+0x54>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	4a08      	ldr	r2, [pc, #32]	@ (8002cd0 <vPortExitCritical+0x54>)
 8002cae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002cb0:	4b07      	ldr	r3, [pc, #28]	@ (8002cd0 <vPortExitCritical+0x54>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <vPortExitCritical+0x48>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002cc2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	24000014 	.word	0x24000014
	...

08002ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002ce0:	f3ef 8009 	mrs	r0, PSP
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <pxCurrentTCBConst>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	f01e 0f10 	tst.w	lr, #16
 8002cf0:	bf08      	it	eq
 8002cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cfa:	6010      	str	r0, [r2, #0]
 8002cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002d04:	b672      	cpsid	i
 8002d06:	f380 8811 	msr	BASEPRI, r0
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	b662      	cpsie	i
 8002d14:	f7ff fd58 	bl	80027c8 <vTaskSwitchContext>
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f380 8811 	msr	BASEPRI, r0
 8002d20:	bc09      	pop	{r0, r3}
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	6808      	ldr	r0, [r1, #0]
 8002d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2a:	f01e 0f10 	tst.w	lr, #16
 8002d2e:	bf08      	it	eq
 8002d30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d34:	f380 8809 	msr	PSP, r0
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop

08002d40 <pxCurrentTCBConst>:
 8002d40:	24000098 	.word	0x24000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop

08002d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d52:	b672      	cpsid	i
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	b662      	cpsie	i
 8002d62:	607b      	str	r3, [r7, #4]
    }
 8002d64:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002d66:	f7ff fc73 	bl	8002650 <xTaskIncrementTick>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <SysTick_Handler+0x44>)
 8002d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f383 8811 	msr	BASEPRI, r3
    }
 8002d82:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	e000ed04 	.word	0xe000ed04

08002d90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <vPortSetupTimerInterrupt+0x34>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <vPortSetupTimerInterrupt+0x38>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002da0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <vPortSetupTimerInterrupt+0x3c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <vPortSetupTimerInterrupt+0x40>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	099b      	lsrs	r3, r3, #6
 8002dac:	4a09      	ldr	r2, [pc, #36]	@ (8002dd4 <vPortSetupTimerInterrupt+0x44>)
 8002dae:	3b01      	subs	r3, #1
 8002db0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002db2:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <vPortSetupTimerInterrupt+0x34>)
 8002db4:	2207      	movs	r2, #7
 8002db6:	601a      	str	r2, [r3, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000e010 	.word	0xe000e010
 8002dc8:	e000e018 	.word	0xe000e018
 8002dcc:	24000000 	.word	0x24000000
 8002dd0:	10624dd3 	.word	0x10624dd3
 8002dd4:	e000e014 	.word	0xe000e014

08002dd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002dd8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002de8 <vPortEnableVFP+0x10>
 8002ddc:	6801      	ldr	r1, [r0, #0]
 8002dde:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002de2:	6001      	str	r1, [r0, #0]
 8002de4:	4770      	bx	lr
 8002de6:	0000      	.short	0x0000
 8002de8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop

08002df0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	@ 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002dfc:	f7ff fb7a 	bl	80024f4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002e00:	4b69      	ldr	r3, [pc, #420]	@ (8002fa8 <pvPortMalloc+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002e08:	f000 f942 	bl	8003090 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e0c:	4b67      	ldr	r3, [pc, #412]	@ (8002fac <pvPortMalloc+0x1bc>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f040 80ad 	bne.w	8002f74 <pvPortMalloc+0x184>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d030      	beq.n	8002e82 <pvPortMalloc+0x92>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002e20:	2208      	movs	r2, #8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d22a      	bcs.n	8002e82 <pvPortMalloc+0x92>
            {
                xWantedSize += xHeapStructSize;
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d024      	beq.n	8002e88 <pvPortMalloc+0x98>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f023 0307 	bic.w	r3, r3, #7
 8002e44:	3308      	adds	r3, #8
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d217      	bcs.n	8002e7c <pvPortMalloc+0x8c>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f023 0307 	bic.w	r3, r3, #7
 8002e52:	3308      	adds	r3, #8
 8002e54:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <pvPortMalloc+0x98>
        __asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	b672      	cpsid	i
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	b662      	cpsie	i
 8002e74:	617b      	str	r3, [r7, #20]
    }
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e80:	e002      	b.n	8002e88 <pvPortMalloc+0x98>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	e000      	b.n	8002e8a <pvPortMalloc+0x9a>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e88:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d071      	beq.n	8002f74 <pvPortMalloc+0x184>
 8002e90:	4b47      	ldr	r3, [pc, #284]	@ (8002fb0 <pvPortMalloc+0x1c0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d86c      	bhi.n	8002f74 <pvPortMalloc+0x184>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002e9a:	4b46      	ldr	r3, [pc, #280]	@ (8002fb4 <pvPortMalloc+0x1c4>)
 8002e9c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002e9e:	4b45      	ldr	r3, [pc, #276]	@ (8002fb4 <pvPortMalloc+0x1c4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ea4:	e004      	b.n	8002eb0 <pvPortMalloc+0xc0>
                {
                    pxPreviousBlock = pxBlock;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d903      	bls.n	8002ec2 <pvPortMalloc+0xd2>
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f1      	bne.n	8002ea6 <pvPortMalloc+0xb6>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002ec2:	4b39      	ldr	r3, [pc, #228]	@ (8002fa8 <pvPortMalloc+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d053      	beq.n	8002f74 <pvPortMalloc+0x184>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	4413      	add	r3, r2
 8002ed4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	1ad2      	subs	r2, r2, r3
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d922      	bls.n	8002f34 <pvPortMalloc+0x144>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00d      	beq.n	8002f1c <pvPortMalloc+0x12c>
        __asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f04:	b672      	cpsid	i
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	b662      	cpsie	i
 8002f14:	613b      	str	r3, [r7, #16]
    }
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <pvPortMalloc+0x128>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	1ad2      	subs	r2, r2, r3
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f2e:	69b8      	ldr	r0, [r7, #24]
 8002f30:	f000 f910 	bl	8003154 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f34:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb0 <pvPortMalloc+0x1c0>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb0 <pvPortMalloc+0x1c0>)
 8002f40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f42:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <pvPortMalloc+0x1c0>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb8 <pvPortMalloc+0x1c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d203      	bcs.n	8002f56 <pvPortMalloc+0x166>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f4e:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <pvPortMalloc+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a19      	ldr	r2, [pc, #100]	@ (8002fb8 <pvPortMalloc+0x1c8>)
 8002f54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <pvPortMalloc+0x1bc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002f6a:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <pvPortMalloc+0x1cc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	4a12      	ldr	r2, [pc, #72]	@ (8002fbc <pvPortMalloc+0x1cc>)
 8002f72:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002f74:	f7ff facc 	bl	8002510 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <pvPortMalloc+0x1ae>
        __asm volatile
 8002f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f86:	b672      	cpsid	i
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	b662      	cpsie	i
 8002f96:	60fb      	str	r3, [r7, #12]
    }
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	e7fd      	b.n	8002f9a <pvPortMalloc+0x1aa>
    return pvReturn;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3728      	adds	r7, #40	@ 0x28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	240051d4 	.word	0x240051d4
 8002fac:	240051e8 	.word	0x240051e8
 8002fb0:	240051d8 	.word	0x240051d8
 8002fb4:	240051cc 	.word	0x240051cc
 8002fb8:	240051dc 	.word	0x240051dc
 8002fbc:	240051e0 	.word	0x240051e0

08002fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d053      	beq.n	800307a <vPortFree+0xba>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	425b      	negs	r3, r3
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4413      	add	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4b27      	ldr	r3, [pc, #156]	@ (8003084 <vPortFree+0xc4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10d      	bne.n	800300a <vPortFree+0x4a>
        __asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff2:	b672      	cpsid	i
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	b662      	cpsie	i
 8003002:	60fb      	str	r3, [r7, #12]
    }
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	e7fd      	b.n	8003006 <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00d      	beq.n	800302e <vPortFree+0x6e>
        __asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003016:	b672      	cpsid	i
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	b662      	cpsie	i
 8003026:	60bb      	str	r3, [r7, #8]
    }
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	e7fd      	b.n	800302a <vPortFree+0x6a>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4b14      	ldr	r3, [pc, #80]	@ (8003084 <vPortFree+0xc4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01e      	beq.n	800307a <vPortFree+0xba>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11a      	bne.n	800307a <vPortFree+0xba>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	4b0e      	ldr	r3, [pc, #56]	@ (8003084 <vPortFree+0xc4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	43db      	mvns	r3, r3
 800304e:	401a      	ands	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003054:	f7ff fa4e 	bl	80024f4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	4b0a      	ldr	r3, [pc, #40]	@ (8003088 <vPortFree+0xc8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4413      	add	r3, r2
 8003062:	4a09      	ldr	r2, [pc, #36]	@ (8003088 <vPortFree+0xc8>)
 8003064:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003066:	6938      	ldr	r0, [r7, #16]
 8003068:	f000 f874 	bl	8003154 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800306c:	4b07      	ldr	r3, [pc, #28]	@ (800308c <vPortFree+0xcc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	4a06      	ldr	r2, [pc, #24]	@ (800308c <vPortFree+0xcc>)
 8003074:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003076:	f7ff fa4b 	bl	8002510 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	240051e8 	.word	0x240051e8
 8003088:	240051d8 	.word	0x240051d8
 800308c:	240051e4 	.word	0x240051e4

08003090 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003096:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800309a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800309c:	4b27      	ldr	r3, [pc, #156]	@ (800313c <prvHeapInit+0xac>)
 800309e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00c      	beq.n	80030c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3307      	adds	r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0307 	bic.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <prvHeapInit+0xac>)
 80030c0:	4413      	add	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003140 <prvHeapInit+0xb0>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80030ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003140 <prvHeapInit+0xb0>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	4413      	add	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80030dc:	2208      	movs	r2, #8
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0307 	bic.w	r3, r3, #7
 80030ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a15      	ldr	r2, [pc, #84]	@ (8003144 <prvHeapInit+0xb4>)
 80030f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <prvHeapInit+0xb4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80030fa:	4b12      	ldr	r3, [pc, #72]	@ (8003144 <prvHeapInit+0xb4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	1ad2      	subs	r2, r2, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003110:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <prvHeapInit+0xb4>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a0a      	ldr	r2, [pc, #40]	@ (8003148 <prvHeapInit+0xb8>)
 800311e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a09      	ldr	r2, [pc, #36]	@ (800314c <prvHeapInit+0xbc>)
 8003126:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003128:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <prvHeapInit+0xc0>)
 800312a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800312e:	601a      	str	r2, [r3, #0]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	240001cc 	.word	0x240001cc
 8003140:	240051cc 	.word	0x240051cc
 8003144:	240051d4 	.word	0x240051d4
 8003148:	240051dc 	.word	0x240051dc
 800314c:	240051d8 	.word	0x240051d8
 8003150:	240051e8 	.word	0x240051e8

08003154 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800315c:	4b28      	ldr	r3, [pc, #160]	@ (8003200 <prvInsertBlockIntoFreeList+0xac>)
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e002      	b.n	8003168 <prvInsertBlockIntoFreeList+0x14>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d8f7      	bhi.n	8003162 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	d108      	bne.n	8003196 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	441a      	add	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	441a      	add	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d118      	bne.n	80031dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <prvInsertBlockIntoFreeList+0xb0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d00d      	beq.n	80031d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e008      	b.n	80031e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80031d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <prvInsertBlockIntoFreeList+0xb0>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e003      	b.n	80031e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d002      	beq.n	80031f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	240051cc 	.word	0x240051cc
 8003204:	240051d4 	.word	0x240051d4

08003208 <std>:
 8003208:	2300      	movs	r3, #0
 800320a:	b510      	push	{r4, lr}
 800320c:	4604      	mov	r4, r0
 800320e:	e9c0 3300 	strd	r3, r3, [r0]
 8003212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003216:	6083      	str	r3, [r0, #8]
 8003218:	8181      	strh	r1, [r0, #12]
 800321a:	6643      	str	r3, [r0, #100]	@ 0x64
 800321c:	81c2      	strh	r2, [r0, #14]
 800321e:	6183      	str	r3, [r0, #24]
 8003220:	4619      	mov	r1, r3
 8003222:	2208      	movs	r2, #8
 8003224:	305c      	adds	r0, #92	@ 0x5c
 8003226:	f000 f906 	bl	8003436 <memset>
 800322a:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <std+0x58>)
 800322c:	6263      	str	r3, [r4, #36]	@ 0x24
 800322e:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <std+0x5c>)
 8003230:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003232:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <std+0x60>)
 8003234:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <std+0x64>)
 8003238:	6323      	str	r3, [r4, #48]	@ 0x30
 800323a:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <std+0x68>)
 800323c:	6224      	str	r4, [r4, #32]
 800323e:	429c      	cmp	r4, r3
 8003240:	d006      	beq.n	8003250 <std+0x48>
 8003242:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003246:	4294      	cmp	r4, r2
 8003248:	d002      	beq.n	8003250 <std+0x48>
 800324a:	33d0      	adds	r3, #208	@ 0xd0
 800324c:	429c      	cmp	r4, r3
 800324e:	d105      	bne.n	800325c <std+0x54>
 8003250:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003258:	f000 b960 	b.w	800351c <__retarget_lock_init_recursive>
 800325c:	bd10      	pop	{r4, pc}
 800325e:	bf00      	nop
 8003260:	080033b1 	.word	0x080033b1
 8003264:	080033d3 	.word	0x080033d3
 8003268:	0800340b 	.word	0x0800340b
 800326c:	0800342f 	.word	0x0800342f
 8003270:	240051ec 	.word	0x240051ec

08003274 <stdio_exit_handler>:
 8003274:	4a02      	ldr	r2, [pc, #8]	@ (8003280 <stdio_exit_handler+0xc>)
 8003276:	4903      	ldr	r1, [pc, #12]	@ (8003284 <stdio_exit_handler+0x10>)
 8003278:	4803      	ldr	r0, [pc, #12]	@ (8003288 <stdio_exit_handler+0x14>)
 800327a:	f000 b869 	b.w	8003350 <_fwalk_sglue>
 800327e:	bf00      	nop
 8003280:	24000018 	.word	0x24000018
 8003284:	08003dbd 	.word	0x08003dbd
 8003288:	24000028 	.word	0x24000028

0800328c <cleanup_stdio>:
 800328c:	6841      	ldr	r1, [r0, #4]
 800328e:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <cleanup_stdio+0x34>)
 8003290:	4299      	cmp	r1, r3
 8003292:	b510      	push	{r4, lr}
 8003294:	4604      	mov	r4, r0
 8003296:	d001      	beq.n	800329c <cleanup_stdio+0x10>
 8003298:	f000 fd90 	bl	8003dbc <_fflush_r>
 800329c:	68a1      	ldr	r1, [r4, #8]
 800329e:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <cleanup_stdio+0x38>)
 80032a0:	4299      	cmp	r1, r3
 80032a2:	d002      	beq.n	80032aa <cleanup_stdio+0x1e>
 80032a4:	4620      	mov	r0, r4
 80032a6:	f000 fd89 	bl	8003dbc <_fflush_r>
 80032aa:	68e1      	ldr	r1, [r4, #12]
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <cleanup_stdio+0x3c>)
 80032ae:	4299      	cmp	r1, r3
 80032b0:	d004      	beq.n	80032bc <cleanup_stdio+0x30>
 80032b2:	4620      	mov	r0, r4
 80032b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032b8:	f000 bd80 	b.w	8003dbc <_fflush_r>
 80032bc:	bd10      	pop	{r4, pc}
 80032be:	bf00      	nop
 80032c0:	240051ec 	.word	0x240051ec
 80032c4:	24005254 	.word	0x24005254
 80032c8:	240052bc 	.word	0x240052bc

080032cc <global_stdio_init.part.0>:
 80032cc:	b510      	push	{r4, lr}
 80032ce:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <global_stdio_init.part.0+0x30>)
 80032d0:	4c0b      	ldr	r4, [pc, #44]	@ (8003300 <global_stdio_init.part.0+0x34>)
 80032d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003304 <global_stdio_init.part.0+0x38>)
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	4620      	mov	r0, r4
 80032d8:	2200      	movs	r2, #0
 80032da:	2104      	movs	r1, #4
 80032dc:	f7ff ff94 	bl	8003208 <std>
 80032e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80032e4:	2201      	movs	r2, #1
 80032e6:	2109      	movs	r1, #9
 80032e8:	f7ff ff8e 	bl	8003208 <std>
 80032ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80032f0:	2202      	movs	r2, #2
 80032f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032f6:	2112      	movs	r1, #18
 80032f8:	f7ff bf86 	b.w	8003208 <std>
 80032fc:	24005324 	.word	0x24005324
 8003300:	240051ec 	.word	0x240051ec
 8003304:	08003275 	.word	0x08003275

08003308 <__sfp_lock_acquire>:
 8003308:	4801      	ldr	r0, [pc, #4]	@ (8003310 <__sfp_lock_acquire+0x8>)
 800330a:	f000 b908 	b.w	800351e <__retarget_lock_acquire_recursive>
 800330e:	bf00      	nop
 8003310:	2400532d 	.word	0x2400532d

08003314 <__sfp_lock_release>:
 8003314:	4801      	ldr	r0, [pc, #4]	@ (800331c <__sfp_lock_release+0x8>)
 8003316:	f000 b903 	b.w	8003520 <__retarget_lock_release_recursive>
 800331a:	bf00      	nop
 800331c:	2400532d 	.word	0x2400532d

08003320 <__sinit>:
 8003320:	b510      	push	{r4, lr}
 8003322:	4604      	mov	r4, r0
 8003324:	f7ff fff0 	bl	8003308 <__sfp_lock_acquire>
 8003328:	6a23      	ldr	r3, [r4, #32]
 800332a:	b11b      	cbz	r3, 8003334 <__sinit+0x14>
 800332c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003330:	f7ff bff0 	b.w	8003314 <__sfp_lock_release>
 8003334:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <__sinit+0x28>)
 8003336:	6223      	str	r3, [r4, #32]
 8003338:	4b04      	ldr	r3, [pc, #16]	@ (800334c <__sinit+0x2c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f5      	bne.n	800332c <__sinit+0xc>
 8003340:	f7ff ffc4 	bl	80032cc <global_stdio_init.part.0>
 8003344:	e7f2      	b.n	800332c <__sinit+0xc>
 8003346:	bf00      	nop
 8003348:	0800328d 	.word	0x0800328d
 800334c:	24005324 	.word	0x24005324

08003350 <_fwalk_sglue>:
 8003350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003354:	4607      	mov	r7, r0
 8003356:	4688      	mov	r8, r1
 8003358:	4614      	mov	r4, r2
 800335a:	2600      	movs	r6, #0
 800335c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003360:	f1b9 0901 	subs.w	r9, r9, #1
 8003364:	d505      	bpl.n	8003372 <_fwalk_sglue+0x22>
 8003366:	6824      	ldr	r4, [r4, #0]
 8003368:	2c00      	cmp	r4, #0
 800336a:	d1f7      	bne.n	800335c <_fwalk_sglue+0xc>
 800336c:	4630      	mov	r0, r6
 800336e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003372:	89ab      	ldrh	r3, [r5, #12]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d907      	bls.n	8003388 <_fwalk_sglue+0x38>
 8003378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800337c:	3301      	adds	r3, #1
 800337e:	d003      	beq.n	8003388 <_fwalk_sglue+0x38>
 8003380:	4629      	mov	r1, r5
 8003382:	4638      	mov	r0, r7
 8003384:	47c0      	blx	r8
 8003386:	4306      	orrs	r6, r0
 8003388:	3568      	adds	r5, #104	@ 0x68
 800338a:	e7e9      	b.n	8003360 <_fwalk_sglue+0x10>

0800338c <iprintf>:
 800338c:	b40f      	push	{r0, r1, r2, r3}
 800338e:	b507      	push	{r0, r1, r2, lr}
 8003390:	4906      	ldr	r1, [pc, #24]	@ (80033ac <iprintf+0x20>)
 8003392:	ab04      	add	r3, sp, #16
 8003394:	6808      	ldr	r0, [r1, #0]
 8003396:	f853 2b04 	ldr.w	r2, [r3], #4
 800339a:	6881      	ldr	r1, [r0, #8]
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	f000 f9e3 	bl	8003768 <_vfiprintf_r>
 80033a2:	b003      	add	sp, #12
 80033a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80033a8:	b004      	add	sp, #16
 80033aa:	4770      	bx	lr
 80033ac:	24000024 	.word	0x24000024

080033b0 <__sread>:
 80033b0:	b510      	push	{r4, lr}
 80033b2:	460c      	mov	r4, r1
 80033b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b8:	f000 f868 	bl	800348c <_read_r>
 80033bc:	2800      	cmp	r0, #0
 80033be:	bfab      	itete	ge
 80033c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80033c2:	89a3      	ldrhlt	r3, [r4, #12]
 80033c4:	181b      	addge	r3, r3, r0
 80033c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80033ca:	bfac      	ite	ge
 80033cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80033ce:	81a3      	strhlt	r3, [r4, #12]
 80033d0:	bd10      	pop	{r4, pc}

080033d2 <__swrite>:
 80033d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d6:	461f      	mov	r7, r3
 80033d8:	898b      	ldrh	r3, [r1, #12]
 80033da:	05db      	lsls	r3, r3, #23
 80033dc:	4605      	mov	r5, r0
 80033de:	460c      	mov	r4, r1
 80033e0:	4616      	mov	r6, r2
 80033e2:	d505      	bpl.n	80033f0 <__swrite+0x1e>
 80033e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033e8:	2302      	movs	r3, #2
 80033ea:	2200      	movs	r2, #0
 80033ec:	f000 f83c 	bl	8003468 <_lseek_r>
 80033f0:	89a3      	ldrh	r3, [r4, #12]
 80033f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033fa:	81a3      	strh	r3, [r4, #12]
 80033fc:	4632      	mov	r2, r6
 80033fe:	463b      	mov	r3, r7
 8003400:	4628      	mov	r0, r5
 8003402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003406:	f000 b853 	b.w	80034b0 <_write_r>

0800340a <__sseek>:
 800340a:	b510      	push	{r4, lr}
 800340c:	460c      	mov	r4, r1
 800340e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003412:	f000 f829 	bl	8003468 <_lseek_r>
 8003416:	1c43      	adds	r3, r0, #1
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	bf15      	itete	ne
 800341c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800341e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003426:	81a3      	strheq	r3, [r4, #12]
 8003428:	bf18      	it	ne
 800342a:	81a3      	strhne	r3, [r4, #12]
 800342c:	bd10      	pop	{r4, pc}

0800342e <__sclose>:
 800342e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003432:	f000 b809 	b.w	8003448 <_close_r>

08003436 <memset>:
 8003436:	4402      	add	r2, r0
 8003438:	4603      	mov	r3, r0
 800343a:	4293      	cmp	r3, r2
 800343c:	d100      	bne.n	8003440 <memset+0xa>
 800343e:	4770      	bx	lr
 8003440:	f803 1b01 	strb.w	r1, [r3], #1
 8003444:	e7f9      	b.n	800343a <memset+0x4>
	...

08003448 <_close_r>:
 8003448:	b538      	push	{r3, r4, r5, lr}
 800344a:	4d06      	ldr	r5, [pc, #24]	@ (8003464 <_close_r+0x1c>)
 800344c:	2300      	movs	r3, #0
 800344e:	4604      	mov	r4, r0
 8003450:	4608      	mov	r0, r1
 8003452:	602b      	str	r3, [r5, #0]
 8003454:	f7fd fa57 	bl	8000906 <_close>
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	d102      	bne.n	8003462 <_close_r+0x1a>
 800345c:	682b      	ldr	r3, [r5, #0]
 800345e:	b103      	cbz	r3, 8003462 <_close_r+0x1a>
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	bd38      	pop	{r3, r4, r5, pc}
 8003464:	24005328 	.word	0x24005328

08003468 <_lseek_r>:
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	4d07      	ldr	r5, [pc, #28]	@ (8003488 <_lseek_r+0x20>)
 800346c:	4604      	mov	r4, r0
 800346e:	4608      	mov	r0, r1
 8003470:	4611      	mov	r1, r2
 8003472:	2200      	movs	r2, #0
 8003474:	602a      	str	r2, [r5, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	f7fd fa6c 	bl	8000954 <_lseek>
 800347c:	1c43      	adds	r3, r0, #1
 800347e:	d102      	bne.n	8003486 <_lseek_r+0x1e>
 8003480:	682b      	ldr	r3, [r5, #0]
 8003482:	b103      	cbz	r3, 8003486 <_lseek_r+0x1e>
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	bd38      	pop	{r3, r4, r5, pc}
 8003488:	24005328 	.word	0x24005328

0800348c <_read_r>:
 800348c:	b538      	push	{r3, r4, r5, lr}
 800348e:	4d07      	ldr	r5, [pc, #28]	@ (80034ac <_read_r+0x20>)
 8003490:	4604      	mov	r4, r0
 8003492:	4608      	mov	r0, r1
 8003494:	4611      	mov	r1, r2
 8003496:	2200      	movs	r2, #0
 8003498:	602a      	str	r2, [r5, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	f7fd f9fa 	bl	8000894 <_read>
 80034a0:	1c43      	adds	r3, r0, #1
 80034a2:	d102      	bne.n	80034aa <_read_r+0x1e>
 80034a4:	682b      	ldr	r3, [r5, #0]
 80034a6:	b103      	cbz	r3, 80034aa <_read_r+0x1e>
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
 80034ac:	24005328 	.word	0x24005328

080034b0 <_write_r>:
 80034b0:	b538      	push	{r3, r4, r5, lr}
 80034b2:	4d07      	ldr	r5, [pc, #28]	@ (80034d0 <_write_r+0x20>)
 80034b4:	4604      	mov	r4, r0
 80034b6:	4608      	mov	r0, r1
 80034b8:	4611      	mov	r1, r2
 80034ba:	2200      	movs	r2, #0
 80034bc:	602a      	str	r2, [r5, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	f7fd fa05 	bl	80008ce <_write>
 80034c4:	1c43      	adds	r3, r0, #1
 80034c6:	d102      	bne.n	80034ce <_write_r+0x1e>
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	b103      	cbz	r3, 80034ce <_write_r+0x1e>
 80034cc:	6023      	str	r3, [r4, #0]
 80034ce:	bd38      	pop	{r3, r4, r5, pc}
 80034d0:	24005328 	.word	0x24005328

080034d4 <__libc_init_array>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	4d0d      	ldr	r5, [pc, #52]	@ (800350c <__libc_init_array+0x38>)
 80034d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003510 <__libc_init_array+0x3c>)
 80034da:	1b64      	subs	r4, r4, r5
 80034dc:	10a4      	asrs	r4, r4, #2
 80034de:	2600      	movs	r6, #0
 80034e0:	42a6      	cmp	r6, r4
 80034e2:	d109      	bne.n	80034f8 <__libc_init_array+0x24>
 80034e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003514 <__libc_init_array+0x40>)
 80034e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003518 <__libc_init_array+0x44>)
 80034e8:	f000 fdc6 	bl	8004078 <_init>
 80034ec:	1b64      	subs	r4, r4, r5
 80034ee:	10a4      	asrs	r4, r4, #2
 80034f0:	2600      	movs	r6, #0
 80034f2:	42a6      	cmp	r6, r4
 80034f4:	d105      	bne.n	8003502 <__libc_init_array+0x2e>
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
 80034f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fc:	4798      	blx	r3
 80034fe:	3601      	adds	r6, #1
 8003500:	e7ee      	b.n	80034e0 <__libc_init_array+0xc>
 8003502:	f855 3b04 	ldr.w	r3, [r5], #4
 8003506:	4798      	blx	r3
 8003508:	3601      	adds	r6, #1
 800350a:	e7f2      	b.n	80034f2 <__libc_init_array+0x1e>
 800350c:	0800410c 	.word	0x0800410c
 8003510:	0800410c 	.word	0x0800410c
 8003514:	0800410c 	.word	0x0800410c
 8003518:	08004110 	.word	0x08004110

0800351c <__retarget_lock_init_recursive>:
 800351c:	4770      	bx	lr

0800351e <__retarget_lock_acquire_recursive>:
 800351e:	4770      	bx	lr

08003520 <__retarget_lock_release_recursive>:
 8003520:	4770      	bx	lr
	...

08003524 <_free_r>:
 8003524:	b538      	push	{r3, r4, r5, lr}
 8003526:	4605      	mov	r5, r0
 8003528:	2900      	cmp	r1, #0
 800352a:	d041      	beq.n	80035b0 <_free_r+0x8c>
 800352c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003530:	1f0c      	subs	r4, r1, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	bfb8      	it	lt
 8003536:	18e4      	addlt	r4, r4, r3
 8003538:	f000 f8e0 	bl	80036fc <__malloc_lock>
 800353c:	4a1d      	ldr	r2, [pc, #116]	@ (80035b4 <_free_r+0x90>)
 800353e:	6813      	ldr	r3, [r2, #0]
 8003540:	b933      	cbnz	r3, 8003550 <_free_r+0x2c>
 8003542:	6063      	str	r3, [r4, #4]
 8003544:	6014      	str	r4, [r2, #0]
 8003546:	4628      	mov	r0, r5
 8003548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800354c:	f000 b8dc 	b.w	8003708 <__malloc_unlock>
 8003550:	42a3      	cmp	r3, r4
 8003552:	d908      	bls.n	8003566 <_free_r+0x42>
 8003554:	6820      	ldr	r0, [r4, #0]
 8003556:	1821      	adds	r1, r4, r0
 8003558:	428b      	cmp	r3, r1
 800355a:	bf01      	itttt	eq
 800355c:	6819      	ldreq	r1, [r3, #0]
 800355e:	685b      	ldreq	r3, [r3, #4]
 8003560:	1809      	addeq	r1, r1, r0
 8003562:	6021      	streq	r1, [r4, #0]
 8003564:	e7ed      	b.n	8003542 <_free_r+0x1e>
 8003566:	461a      	mov	r2, r3
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	b10b      	cbz	r3, 8003570 <_free_r+0x4c>
 800356c:	42a3      	cmp	r3, r4
 800356e:	d9fa      	bls.n	8003566 <_free_r+0x42>
 8003570:	6811      	ldr	r1, [r2, #0]
 8003572:	1850      	adds	r0, r2, r1
 8003574:	42a0      	cmp	r0, r4
 8003576:	d10b      	bne.n	8003590 <_free_r+0x6c>
 8003578:	6820      	ldr	r0, [r4, #0]
 800357a:	4401      	add	r1, r0
 800357c:	1850      	adds	r0, r2, r1
 800357e:	4283      	cmp	r3, r0
 8003580:	6011      	str	r1, [r2, #0]
 8003582:	d1e0      	bne.n	8003546 <_free_r+0x22>
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	6053      	str	r3, [r2, #4]
 800358a:	4408      	add	r0, r1
 800358c:	6010      	str	r0, [r2, #0]
 800358e:	e7da      	b.n	8003546 <_free_r+0x22>
 8003590:	d902      	bls.n	8003598 <_free_r+0x74>
 8003592:	230c      	movs	r3, #12
 8003594:	602b      	str	r3, [r5, #0]
 8003596:	e7d6      	b.n	8003546 <_free_r+0x22>
 8003598:	6820      	ldr	r0, [r4, #0]
 800359a:	1821      	adds	r1, r4, r0
 800359c:	428b      	cmp	r3, r1
 800359e:	bf04      	itt	eq
 80035a0:	6819      	ldreq	r1, [r3, #0]
 80035a2:	685b      	ldreq	r3, [r3, #4]
 80035a4:	6063      	str	r3, [r4, #4]
 80035a6:	bf04      	itt	eq
 80035a8:	1809      	addeq	r1, r1, r0
 80035aa:	6021      	streq	r1, [r4, #0]
 80035ac:	6054      	str	r4, [r2, #4]
 80035ae:	e7ca      	b.n	8003546 <_free_r+0x22>
 80035b0:	bd38      	pop	{r3, r4, r5, pc}
 80035b2:	bf00      	nop
 80035b4:	24005334 	.word	0x24005334

080035b8 <sbrk_aligned>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	4e0f      	ldr	r6, [pc, #60]	@ (80035f8 <sbrk_aligned+0x40>)
 80035bc:	460c      	mov	r4, r1
 80035be:	6831      	ldr	r1, [r6, #0]
 80035c0:	4605      	mov	r5, r0
 80035c2:	b911      	cbnz	r1, 80035ca <sbrk_aligned+0x12>
 80035c4:	f000 fcb6 	bl	8003f34 <_sbrk_r>
 80035c8:	6030      	str	r0, [r6, #0]
 80035ca:	4621      	mov	r1, r4
 80035cc:	4628      	mov	r0, r5
 80035ce:	f000 fcb1 	bl	8003f34 <_sbrk_r>
 80035d2:	1c43      	adds	r3, r0, #1
 80035d4:	d103      	bne.n	80035de <sbrk_aligned+0x26>
 80035d6:	f04f 34ff 	mov.w	r4, #4294967295
 80035da:	4620      	mov	r0, r4
 80035dc:	bd70      	pop	{r4, r5, r6, pc}
 80035de:	1cc4      	adds	r4, r0, #3
 80035e0:	f024 0403 	bic.w	r4, r4, #3
 80035e4:	42a0      	cmp	r0, r4
 80035e6:	d0f8      	beq.n	80035da <sbrk_aligned+0x22>
 80035e8:	1a21      	subs	r1, r4, r0
 80035ea:	4628      	mov	r0, r5
 80035ec:	f000 fca2 	bl	8003f34 <_sbrk_r>
 80035f0:	3001      	adds	r0, #1
 80035f2:	d1f2      	bne.n	80035da <sbrk_aligned+0x22>
 80035f4:	e7ef      	b.n	80035d6 <sbrk_aligned+0x1e>
 80035f6:	bf00      	nop
 80035f8:	24005330 	.word	0x24005330

080035fc <_malloc_r>:
 80035fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003600:	1ccd      	adds	r5, r1, #3
 8003602:	f025 0503 	bic.w	r5, r5, #3
 8003606:	3508      	adds	r5, #8
 8003608:	2d0c      	cmp	r5, #12
 800360a:	bf38      	it	cc
 800360c:	250c      	movcc	r5, #12
 800360e:	2d00      	cmp	r5, #0
 8003610:	4606      	mov	r6, r0
 8003612:	db01      	blt.n	8003618 <_malloc_r+0x1c>
 8003614:	42a9      	cmp	r1, r5
 8003616:	d904      	bls.n	8003622 <_malloc_r+0x26>
 8003618:	230c      	movs	r3, #12
 800361a:	6033      	str	r3, [r6, #0]
 800361c:	2000      	movs	r0, #0
 800361e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003622:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036f8 <_malloc_r+0xfc>
 8003626:	f000 f869 	bl	80036fc <__malloc_lock>
 800362a:	f8d8 3000 	ldr.w	r3, [r8]
 800362e:	461c      	mov	r4, r3
 8003630:	bb44      	cbnz	r4, 8003684 <_malloc_r+0x88>
 8003632:	4629      	mov	r1, r5
 8003634:	4630      	mov	r0, r6
 8003636:	f7ff ffbf 	bl	80035b8 <sbrk_aligned>
 800363a:	1c43      	adds	r3, r0, #1
 800363c:	4604      	mov	r4, r0
 800363e:	d158      	bne.n	80036f2 <_malloc_r+0xf6>
 8003640:	f8d8 4000 	ldr.w	r4, [r8]
 8003644:	4627      	mov	r7, r4
 8003646:	2f00      	cmp	r7, #0
 8003648:	d143      	bne.n	80036d2 <_malloc_r+0xd6>
 800364a:	2c00      	cmp	r4, #0
 800364c:	d04b      	beq.n	80036e6 <_malloc_r+0xea>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	4639      	mov	r1, r7
 8003652:	4630      	mov	r0, r6
 8003654:	eb04 0903 	add.w	r9, r4, r3
 8003658:	f000 fc6c 	bl	8003f34 <_sbrk_r>
 800365c:	4581      	cmp	r9, r0
 800365e:	d142      	bne.n	80036e6 <_malloc_r+0xea>
 8003660:	6821      	ldr	r1, [r4, #0]
 8003662:	1a6d      	subs	r5, r5, r1
 8003664:	4629      	mov	r1, r5
 8003666:	4630      	mov	r0, r6
 8003668:	f7ff ffa6 	bl	80035b8 <sbrk_aligned>
 800366c:	3001      	adds	r0, #1
 800366e:	d03a      	beq.n	80036e6 <_malloc_r+0xea>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	442b      	add	r3, r5
 8003674:	6023      	str	r3, [r4, #0]
 8003676:	f8d8 3000 	ldr.w	r3, [r8]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	bb62      	cbnz	r2, 80036d8 <_malloc_r+0xdc>
 800367e:	f8c8 7000 	str.w	r7, [r8]
 8003682:	e00f      	b.n	80036a4 <_malloc_r+0xa8>
 8003684:	6822      	ldr	r2, [r4, #0]
 8003686:	1b52      	subs	r2, r2, r5
 8003688:	d420      	bmi.n	80036cc <_malloc_r+0xd0>
 800368a:	2a0b      	cmp	r2, #11
 800368c:	d917      	bls.n	80036be <_malloc_r+0xc2>
 800368e:	1961      	adds	r1, r4, r5
 8003690:	42a3      	cmp	r3, r4
 8003692:	6025      	str	r5, [r4, #0]
 8003694:	bf18      	it	ne
 8003696:	6059      	strne	r1, [r3, #4]
 8003698:	6863      	ldr	r3, [r4, #4]
 800369a:	bf08      	it	eq
 800369c:	f8c8 1000 	streq.w	r1, [r8]
 80036a0:	5162      	str	r2, [r4, r5]
 80036a2:	604b      	str	r3, [r1, #4]
 80036a4:	4630      	mov	r0, r6
 80036a6:	f000 f82f 	bl	8003708 <__malloc_unlock>
 80036aa:	f104 000b 	add.w	r0, r4, #11
 80036ae:	1d23      	adds	r3, r4, #4
 80036b0:	f020 0007 	bic.w	r0, r0, #7
 80036b4:	1ac2      	subs	r2, r0, r3
 80036b6:	bf1c      	itt	ne
 80036b8:	1a1b      	subne	r3, r3, r0
 80036ba:	50a3      	strne	r3, [r4, r2]
 80036bc:	e7af      	b.n	800361e <_malloc_r+0x22>
 80036be:	6862      	ldr	r2, [r4, #4]
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	bf0c      	ite	eq
 80036c4:	f8c8 2000 	streq.w	r2, [r8]
 80036c8:	605a      	strne	r2, [r3, #4]
 80036ca:	e7eb      	b.n	80036a4 <_malloc_r+0xa8>
 80036cc:	4623      	mov	r3, r4
 80036ce:	6864      	ldr	r4, [r4, #4]
 80036d0:	e7ae      	b.n	8003630 <_malloc_r+0x34>
 80036d2:	463c      	mov	r4, r7
 80036d4:	687f      	ldr	r7, [r7, #4]
 80036d6:	e7b6      	b.n	8003646 <_malloc_r+0x4a>
 80036d8:	461a      	mov	r2, r3
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	42a3      	cmp	r3, r4
 80036de:	d1fb      	bne.n	80036d8 <_malloc_r+0xdc>
 80036e0:	2300      	movs	r3, #0
 80036e2:	6053      	str	r3, [r2, #4]
 80036e4:	e7de      	b.n	80036a4 <_malloc_r+0xa8>
 80036e6:	230c      	movs	r3, #12
 80036e8:	6033      	str	r3, [r6, #0]
 80036ea:	4630      	mov	r0, r6
 80036ec:	f000 f80c 	bl	8003708 <__malloc_unlock>
 80036f0:	e794      	b.n	800361c <_malloc_r+0x20>
 80036f2:	6005      	str	r5, [r0, #0]
 80036f4:	e7d6      	b.n	80036a4 <_malloc_r+0xa8>
 80036f6:	bf00      	nop
 80036f8:	24005334 	.word	0x24005334

080036fc <__malloc_lock>:
 80036fc:	4801      	ldr	r0, [pc, #4]	@ (8003704 <__malloc_lock+0x8>)
 80036fe:	f7ff bf0e 	b.w	800351e <__retarget_lock_acquire_recursive>
 8003702:	bf00      	nop
 8003704:	2400532c 	.word	0x2400532c

08003708 <__malloc_unlock>:
 8003708:	4801      	ldr	r0, [pc, #4]	@ (8003710 <__malloc_unlock+0x8>)
 800370a:	f7ff bf09 	b.w	8003520 <__retarget_lock_release_recursive>
 800370e:	bf00      	nop
 8003710:	2400532c 	.word	0x2400532c

08003714 <__sfputc_r>:
 8003714:	6893      	ldr	r3, [r2, #8]
 8003716:	3b01      	subs	r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	b410      	push	{r4}
 800371c:	6093      	str	r3, [r2, #8]
 800371e:	da08      	bge.n	8003732 <__sfputc_r+0x1e>
 8003720:	6994      	ldr	r4, [r2, #24]
 8003722:	42a3      	cmp	r3, r4
 8003724:	db01      	blt.n	800372a <__sfputc_r+0x16>
 8003726:	290a      	cmp	r1, #10
 8003728:	d103      	bne.n	8003732 <__sfputc_r+0x1e>
 800372a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800372e:	f000 bb6d 	b.w	8003e0c <__swbuf_r>
 8003732:	6813      	ldr	r3, [r2, #0]
 8003734:	1c58      	adds	r0, r3, #1
 8003736:	6010      	str	r0, [r2, #0]
 8003738:	7019      	strb	r1, [r3, #0]
 800373a:	4608      	mov	r0, r1
 800373c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003740:	4770      	bx	lr

08003742 <__sfputs_r>:
 8003742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003744:	4606      	mov	r6, r0
 8003746:	460f      	mov	r7, r1
 8003748:	4614      	mov	r4, r2
 800374a:	18d5      	adds	r5, r2, r3
 800374c:	42ac      	cmp	r4, r5
 800374e:	d101      	bne.n	8003754 <__sfputs_r+0x12>
 8003750:	2000      	movs	r0, #0
 8003752:	e007      	b.n	8003764 <__sfputs_r+0x22>
 8003754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003758:	463a      	mov	r2, r7
 800375a:	4630      	mov	r0, r6
 800375c:	f7ff ffda 	bl	8003714 <__sfputc_r>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d1f3      	bne.n	800374c <__sfputs_r+0xa>
 8003764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003768 <_vfiprintf_r>:
 8003768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800376c:	460d      	mov	r5, r1
 800376e:	b09d      	sub	sp, #116	@ 0x74
 8003770:	4614      	mov	r4, r2
 8003772:	4698      	mov	r8, r3
 8003774:	4606      	mov	r6, r0
 8003776:	b118      	cbz	r0, 8003780 <_vfiprintf_r+0x18>
 8003778:	6a03      	ldr	r3, [r0, #32]
 800377a:	b90b      	cbnz	r3, 8003780 <_vfiprintf_r+0x18>
 800377c:	f7ff fdd0 	bl	8003320 <__sinit>
 8003780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003782:	07d9      	lsls	r1, r3, #31
 8003784:	d405      	bmi.n	8003792 <_vfiprintf_r+0x2a>
 8003786:	89ab      	ldrh	r3, [r5, #12]
 8003788:	059a      	lsls	r2, r3, #22
 800378a:	d402      	bmi.n	8003792 <_vfiprintf_r+0x2a>
 800378c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800378e:	f7ff fec6 	bl	800351e <__retarget_lock_acquire_recursive>
 8003792:	89ab      	ldrh	r3, [r5, #12]
 8003794:	071b      	lsls	r3, r3, #28
 8003796:	d501      	bpl.n	800379c <_vfiprintf_r+0x34>
 8003798:	692b      	ldr	r3, [r5, #16]
 800379a:	b99b      	cbnz	r3, 80037c4 <_vfiprintf_r+0x5c>
 800379c:	4629      	mov	r1, r5
 800379e:	4630      	mov	r0, r6
 80037a0:	f000 fb72 	bl	8003e88 <__swsetup_r>
 80037a4:	b170      	cbz	r0, 80037c4 <_vfiprintf_r+0x5c>
 80037a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037a8:	07dc      	lsls	r4, r3, #31
 80037aa:	d504      	bpl.n	80037b6 <_vfiprintf_r+0x4e>
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295
 80037b0:	b01d      	add	sp, #116	@ 0x74
 80037b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b6:	89ab      	ldrh	r3, [r5, #12]
 80037b8:	0598      	lsls	r0, r3, #22
 80037ba:	d4f7      	bmi.n	80037ac <_vfiprintf_r+0x44>
 80037bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037be:	f7ff feaf 	bl	8003520 <__retarget_lock_release_recursive>
 80037c2:	e7f3      	b.n	80037ac <_vfiprintf_r+0x44>
 80037c4:	2300      	movs	r3, #0
 80037c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80037c8:	2320      	movs	r3, #32
 80037ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80037d2:	2330      	movs	r3, #48	@ 0x30
 80037d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003984 <_vfiprintf_r+0x21c>
 80037d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037dc:	f04f 0901 	mov.w	r9, #1
 80037e0:	4623      	mov	r3, r4
 80037e2:	469a      	mov	sl, r3
 80037e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037e8:	b10a      	cbz	r2, 80037ee <_vfiprintf_r+0x86>
 80037ea:	2a25      	cmp	r2, #37	@ 0x25
 80037ec:	d1f9      	bne.n	80037e2 <_vfiprintf_r+0x7a>
 80037ee:	ebba 0b04 	subs.w	fp, sl, r4
 80037f2:	d00b      	beq.n	800380c <_vfiprintf_r+0xa4>
 80037f4:	465b      	mov	r3, fp
 80037f6:	4622      	mov	r2, r4
 80037f8:	4629      	mov	r1, r5
 80037fa:	4630      	mov	r0, r6
 80037fc:	f7ff ffa1 	bl	8003742 <__sfputs_r>
 8003800:	3001      	adds	r0, #1
 8003802:	f000 80a7 	beq.w	8003954 <_vfiprintf_r+0x1ec>
 8003806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003808:	445a      	add	r2, fp
 800380a:	9209      	str	r2, [sp, #36]	@ 0x24
 800380c:	f89a 3000 	ldrb.w	r3, [sl]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 809f 	beq.w	8003954 <_vfiprintf_r+0x1ec>
 8003816:	2300      	movs	r3, #0
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003820:	f10a 0a01 	add.w	sl, sl, #1
 8003824:	9304      	str	r3, [sp, #16]
 8003826:	9307      	str	r3, [sp, #28]
 8003828:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800382c:	931a      	str	r3, [sp, #104]	@ 0x68
 800382e:	4654      	mov	r4, sl
 8003830:	2205      	movs	r2, #5
 8003832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003836:	4853      	ldr	r0, [pc, #332]	@ (8003984 <_vfiprintf_r+0x21c>)
 8003838:	f7fc fd52 	bl	80002e0 <memchr>
 800383c:	9a04      	ldr	r2, [sp, #16]
 800383e:	b9d8      	cbnz	r0, 8003878 <_vfiprintf_r+0x110>
 8003840:	06d1      	lsls	r1, r2, #27
 8003842:	bf44      	itt	mi
 8003844:	2320      	movmi	r3, #32
 8003846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800384a:	0713      	lsls	r3, r2, #28
 800384c:	bf44      	itt	mi
 800384e:	232b      	movmi	r3, #43	@ 0x2b
 8003850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003854:	f89a 3000 	ldrb.w	r3, [sl]
 8003858:	2b2a      	cmp	r3, #42	@ 0x2a
 800385a:	d015      	beq.n	8003888 <_vfiprintf_r+0x120>
 800385c:	9a07      	ldr	r2, [sp, #28]
 800385e:	4654      	mov	r4, sl
 8003860:	2000      	movs	r0, #0
 8003862:	f04f 0c0a 	mov.w	ip, #10
 8003866:	4621      	mov	r1, r4
 8003868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800386c:	3b30      	subs	r3, #48	@ 0x30
 800386e:	2b09      	cmp	r3, #9
 8003870:	d94b      	bls.n	800390a <_vfiprintf_r+0x1a2>
 8003872:	b1b0      	cbz	r0, 80038a2 <_vfiprintf_r+0x13a>
 8003874:	9207      	str	r2, [sp, #28]
 8003876:	e014      	b.n	80038a2 <_vfiprintf_r+0x13a>
 8003878:	eba0 0308 	sub.w	r3, r0, r8
 800387c:	fa09 f303 	lsl.w	r3, r9, r3
 8003880:	4313      	orrs	r3, r2
 8003882:	9304      	str	r3, [sp, #16]
 8003884:	46a2      	mov	sl, r4
 8003886:	e7d2      	b.n	800382e <_vfiprintf_r+0xc6>
 8003888:	9b03      	ldr	r3, [sp, #12]
 800388a:	1d19      	adds	r1, r3, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	9103      	str	r1, [sp, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	bfbb      	ittet	lt
 8003894:	425b      	neglt	r3, r3
 8003896:	f042 0202 	orrlt.w	r2, r2, #2
 800389a:	9307      	strge	r3, [sp, #28]
 800389c:	9307      	strlt	r3, [sp, #28]
 800389e:	bfb8      	it	lt
 80038a0:	9204      	strlt	r2, [sp, #16]
 80038a2:	7823      	ldrb	r3, [r4, #0]
 80038a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80038a6:	d10a      	bne.n	80038be <_vfiprintf_r+0x156>
 80038a8:	7863      	ldrb	r3, [r4, #1]
 80038aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80038ac:	d132      	bne.n	8003914 <_vfiprintf_r+0x1ac>
 80038ae:	9b03      	ldr	r3, [sp, #12]
 80038b0:	1d1a      	adds	r2, r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	9203      	str	r2, [sp, #12]
 80038b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038ba:	3402      	adds	r4, #2
 80038bc:	9305      	str	r3, [sp, #20]
 80038be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003994 <_vfiprintf_r+0x22c>
 80038c2:	7821      	ldrb	r1, [r4, #0]
 80038c4:	2203      	movs	r2, #3
 80038c6:	4650      	mov	r0, sl
 80038c8:	f7fc fd0a 	bl	80002e0 <memchr>
 80038cc:	b138      	cbz	r0, 80038de <_vfiprintf_r+0x176>
 80038ce:	9b04      	ldr	r3, [sp, #16]
 80038d0:	eba0 000a 	sub.w	r0, r0, sl
 80038d4:	2240      	movs	r2, #64	@ 0x40
 80038d6:	4082      	lsls	r2, r0
 80038d8:	4313      	orrs	r3, r2
 80038da:	3401      	adds	r4, #1
 80038dc:	9304      	str	r3, [sp, #16]
 80038de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038e2:	4829      	ldr	r0, [pc, #164]	@ (8003988 <_vfiprintf_r+0x220>)
 80038e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038e8:	2206      	movs	r2, #6
 80038ea:	f7fc fcf9 	bl	80002e0 <memchr>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d03f      	beq.n	8003972 <_vfiprintf_r+0x20a>
 80038f2:	4b26      	ldr	r3, [pc, #152]	@ (800398c <_vfiprintf_r+0x224>)
 80038f4:	bb1b      	cbnz	r3, 800393e <_vfiprintf_r+0x1d6>
 80038f6:	9b03      	ldr	r3, [sp, #12]
 80038f8:	3307      	adds	r3, #7
 80038fa:	f023 0307 	bic.w	r3, r3, #7
 80038fe:	3308      	adds	r3, #8
 8003900:	9303      	str	r3, [sp, #12]
 8003902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003904:	443b      	add	r3, r7
 8003906:	9309      	str	r3, [sp, #36]	@ 0x24
 8003908:	e76a      	b.n	80037e0 <_vfiprintf_r+0x78>
 800390a:	fb0c 3202 	mla	r2, ip, r2, r3
 800390e:	460c      	mov	r4, r1
 8003910:	2001      	movs	r0, #1
 8003912:	e7a8      	b.n	8003866 <_vfiprintf_r+0xfe>
 8003914:	2300      	movs	r3, #0
 8003916:	3401      	adds	r4, #1
 8003918:	9305      	str	r3, [sp, #20]
 800391a:	4619      	mov	r1, r3
 800391c:	f04f 0c0a 	mov.w	ip, #10
 8003920:	4620      	mov	r0, r4
 8003922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003926:	3a30      	subs	r2, #48	@ 0x30
 8003928:	2a09      	cmp	r2, #9
 800392a:	d903      	bls.n	8003934 <_vfiprintf_r+0x1cc>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0c6      	beq.n	80038be <_vfiprintf_r+0x156>
 8003930:	9105      	str	r1, [sp, #20]
 8003932:	e7c4      	b.n	80038be <_vfiprintf_r+0x156>
 8003934:	fb0c 2101 	mla	r1, ip, r1, r2
 8003938:	4604      	mov	r4, r0
 800393a:	2301      	movs	r3, #1
 800393c:	e7f0      	b.n	8003920 <_vfiprintf_r+0x1b8>
 800393e:	ab03      	add	r3, sp, #12
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	462a      	mov	r2, r5
 8003944:	4b12      	ldr	r3, [pc, #72]	@ (8003990 <_vfiprintf_r+0x228>)
 8003946:	a904      	add	r1, sp, #16
 8003948:	4630      	mov	r0, r6
 800394a:	f3af 8000 	nop.w
 800394e:	4607      	mov	r7, r0
 8003950:	1c78      	adds	r0, r7, #1
 8003952:	d1d6      	bne.n	8003902 <_vfiprintf_r+0x19a>
 8003954:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003956:	07d9      	lsls	r1, r3, #31
 8003958:	d405      	bmi.n	8003966 <_vfiprintf_r+0x1fe>
 800395a:	89ab      	ldrh	r3, [r5, #12]
 800395c:	059a      	lsls	r2, r3, #22
 800395e:	d402      	bmi.n	8003966 <_vfiprintf_r+0x1fe>
 8003960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003962:	f7ff fddd 	bl	8003520 <__retarget_lock_release_recursive>
 8003966:	89ab      	ldrh	r3, [r5, #12]
 8003968:	065b      	lsls	r3, r3, #25
 800396a:	f53f af1f 	bmi.w	80037ac <_vfiprintf_r+0x44>
 800396e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003970:	e71e      	b.n	80037b0 <_vfiprintf_r+0x48>
 8003972:	ab03      	add	r3, sp, #12
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	462a      	mov	r2, r5
 8003978:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <_vfiprintf_r+0x228>)
 800397a:	a904      	add	r1, sp, #16
 800397c:	4630      	mov	r0, r6
 800397e:	f000 f879 	bl	8003a74 <_printf_i>
 8003982:	e7e4      	b.n	800394e <_vfiprintf_r+0x1e6>
 8003984:	080040d0 	.word	0x080040d0
 8003988:	080040da 	.word	0x080040da
 800398c:	00000000 	.word	0x00000000
 8003990:	08003743 	.word	0x08003743
 8003994:	080040d6 	.word	0x080040d6

08003998 <_printf_common>:
 8003998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	4616      	mov	r6, r2
 800399e:	4698      	mov	r8, r3
 80039a0:	688a      	ldr	r2, [r1, #8]
 80039a2:	690b      	ldr	r3, [r1, #16]
 80039a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039a8:	4293      	cmp	r3, r2
 80039aa:	bfb8      	it	lt
 80039ac:	4613      	movlt	r3, r2
 80039ae:	6033      	str	r3, [r6, #0]
 80039b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039b4:	4607      	mov	r7, r0
 80039b6:	460c      	mov	r4, r1
 80039b8:	b10a      	cbz	r2, 80039be <_printf_common+0x26>
 80039ba:	3301      	adds	r3, #1
 80039bc:	6033      	str	r3, [r6, #0]
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	0699      	lsls	r1, r3, #26
 80039c2:	bf42      	ittt	mi
 80039c4:	6833      	ldrmi	r3, [r6, #0]
 80039c6:	3302      	addmi	r3, #2
 80039c8:	6033      	strmi	r3, [r6, #0]
 80039ca:	6825      	ldr	r5, [r4, #0]
 80039cc:	f015 0506 	ands.w	r5, r5, #6
 80039d0:	d106      	bne.n	80039e0 <_printf_common+0x48>
 80039d2:	f104 0a19 	add.w	sl, r4, #25
 80039d6:	68e3      	ldr	r3, [r4, #12]
 80039d8:	6832      	ldr	r2, [r6, #0]
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	42ab      	cmp	r3, r5
 80039de:	dc26      	bgt.n	8003a2e <_printf_common+0x96>
 80039e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039e4:	6822      	ldr	r2, [r4, #0]
 80039e6:	3b00      	subs	r3, #0
 80039e8:	bf18      	it	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	0692      	lsls	r2, r2, #26
 80039ee:	d42b      	bmi.n	8003a48 <_printf_common+0xb0>
 80039f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80039f4:	4641      	mov	r1, r8
 80039f6:	4638      	mov	r0, r7
 80039f8:	47c8      	blx	r9
 80039fa:	3001      	adds	r0, #1
 80039fc:	d01e      	beq.n	8003a3c <_printf_common+0xa4>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	6922      	ldr	r2, [r4, #16]
 8003a02:	f003 0306 	and.w	r3, r3, #6
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	bf02      	ittt	eq
 8003a0a:	68e5      	ldreq	r5, [r4, #12]
 8003a0c:	6833      	ldreq	r3, [r6, #0]
 8003a0e:	1aed      	subeq	r5, r5, r3
 8003a10:	68a3      	ldr	r3, [r4, #8]
 8003a12:	bf0c      	ite	eq
 8003a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a18:	2500      	movne	r5, #0
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	bfc4      	itt	gt
 8003a1e:	1a9b      	subgt	r3, r3, r2
 8003a20:	18ed      	addgt	r5, r5, r3
 8003a22:	2600      	movs	r6, #0
 8003a24:	341a      	adds	r4, #26
 8003a26:	42b5      	cmp	r5, r6
 8003a28:	d11a      	bne.n	8003a60 <_printf_common+0xc8>
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	e008      	b.n	8003a40 <_printf_common+0xa8>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4652      	mov	r2, sl
 8003a32:	4641      	mov	r1, r8
 8003a34:	4638      	mov	r0, r7
 8003a36:	47c8      	blx	r9
 8003a38:	3001      	adds	r0, #1
 8003a3a:	d103      	bne.n	8003a44 <_printf_common+0xac>
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a44:	3501      	adds	r5, #1
 8003a46:	e7c6      	b.n	80039d6 <_printf_common+0x3e>
 8003a48:	18e1      	adds	r1, r4, r3
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	2030      	movs	r0, #48	@ 0x30
 8003a4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a52:	4422      	add	r2, r4
 8003a54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	e7c7      	b.n	80039f0 <_printf_common+0x58>
 8003a60:	2301      	movs	r3, #1
 8003a62:	4622      	mov	r2, r4
 8003a64:	4641      	mov	r1, r8
 8003a66:	4638      	mov	r0, r7
 8003a68:	47c8      	blx	r9
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d0e6      	beq.n	8003a3c <_printf_common+0xa4>
 8003a6e:	3601      	adds	r6, #1
 8003a70:	e7d9      	b.n	8003a26 <_printf_common+0x8e>
	...

08003a74 <_printf_i>:
 8003a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a78:	7e0f      	ldrb	r7, [r1, #24]
 8003a7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a7c:	2f78      	cmp	r7, #120	@ 0x78
 8003a7e:	4691      	mov	r9, r2
 8003a80:	4680      	mov	r8, r0
 8003a82:	460c      	mov	r4, r1
 8003a84:	469a      	mov	sl, r3
 8003a86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a8a:	d807      	bhi.n	8003a9c <_printf_i+0x28>
 8003a8c:	2f62      	cmp	r7, #98	@ 0x62
 8003a8e:	d80a      	bhi.n	8003aa6 <_printf_i+0x32>
 8003a90:	2f00      	cmp	r7, #0
 8003a92:	f000 80d2 	beq.w	8003c3a <_printf_i+0x1c6>
 8003a96:	2f58      	cmp	r7, #88	@ 0x58
 8003a98:	f000 80b9 	beq.w	8003c0e <_printf_i+0x19a>
 8003a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003aa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003aa4:	e03a      	b.n	8003b1c <_printf_i+0xa8>
 8003aa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003aaa:	2b15      	cmp	r3, #21
 8003aac:	d8f6      	bhi.n	8003a9c <_printf_i+0x28>
 8003aae:	a101      	add	r1, pc, #4	@ (adr r1, 8003ab4 <_printf_i+0x40>)
 8003ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ab4:	08003b0d 	.word	0x08003b0d
 8003ab8:	08003b21 	.word	0x08003b21
 8003abc:	08003a9d 	.word	0x08003a9d
 8003ac0:	08003a9d 	.word	0x08003a9d
 8003ac4:	08003a9d 	.word	0x08003a9d
 8003ac8:	08003a9d 	.word	0x08003a9d
 8003acc:	08003b21 	.word	0x08003b21
 8003ad0:	08003a9d 	.word	0x08003a9d
 8003ad4:	08003a9d 	.word	0x08003a9d
 8003ad8:	08003a9d 	.word	0x08003a9d
 8003adc:	08003a9d 	.word	0x08003a9d
 8003ae0:	08003c21 	.word	0x08003c21
 8003ae4:	08003b4b 	.word	0x08003b4b
 8003ae8:	08003bdb 	.word	0x08003bdb
 8003aec:	08003a9d 	.word	0x08003a9d
 8003af0:	08003a9d 	.word	0x08003a9d
 8003af4:	08003c43 	.word	0x08003c43
 8003af8:	08003a9d 	.word	0x08003a9d
 8003afc:	08003b4b 	.word	0x08003b4b
 8003b00:	08003a9d 	.word	0x08003a9d
 8003b04:	08003a9d 	.word	0x08003a9d
 8003b08:	08003be3 	.word	0x08003be3
 8003b0c:	6833      	ldr	r3, [r6, #0]
 8003b0e:	1d1a      	adds	r2, r3, #4
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6032      	str	r2, [r6, #0]
 8003b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e09d      	b.n	8003c5c <_printf_i+0x1e8>
 8003b20:	6833      	ldr	r3, [r6, #0]
 8003b22:	6820      	ldr	r0, [r4, #0]
 8003b24:	1d19      	adds	r1, r3, #4
 8003b26:	6031      	str	r1, [r6, #0]
 8003b28:	0606      	lsls	r6, r0, #24
 8003b2a:	d501      	bpl.n	8003b30 <_printf_i+0xbc>
 8003b2c:	681d      	ldr	r5, [r3, #0]
 8003b2e:	e003      	b.n	8003b38 <_printf_i+0xc4>
 8003b30:	0645      	lsls	r5, r0, #25
 8003b32:	d5fb      	bpl.n	8003b2c <_printf_i+0xb8>
 8003b34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b38:	2d00      	cmp	r5, #0
 8003b3a:	da03      	bge.n	8003b44 <_printf_i+0xd0>
 8003b3c:	232d      	movs	r3, #45	@ 0x2d
 8003b3e:	426d      	negs	r5, r5
 8003b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b44:	4859      	ldr	r0, [pc, #356]	@ (8003cac <_printf_i+0x238>)
 8003b46:	230a      	movs	r3, #10
 8003b48:	e011      	b.n	8003b6e <_printf_i+0xfa>
 8003b4a:	6821      	ldr	r1, [r4, #0]
 8003b4c:	6833      	ldr	r3, [r6, #0]
 8003b4e:	0608      	lsls	r0, r1, #24
 8003b50:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b54:	d402      	bmi.n	8003b5c <_printf_i+0xe8>
 8003b56:	0649      	lsls	r1, r1, #25
 8003b58:	bf48      	it	mi
 8003b5a:	b2ad      	uxthmi	r5, r5
 8003b5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b5e:	4853      	ldr	r0, [pc, #332]	@ (8003cac <_printf_i+0x238>)
 8003b60:	6033      	str	r3, [r6, #0]
 8003b62:	bf14      	ite	ne
 8003b64:	230a      	movne	r3, #10
 8003b66:	2308      	moveq	r3, #8
 8003b68:	2100      	movs	r1, #0
 8003b6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b6e:	6866      	ldr	r6, [r4, #4]
 8003b70:	60a6      	str	r6, [r4, #8]
 8003b72:	2e00      	cmp	r6, #0
 8003b74:	bfa2      	ittt	ge
 8003b76:	6821      	ldrge	r1, [r4, #0]
 8003b78:	f021 0104 	bicge.w	r1, r1, #4
 8003b7c:	6021      	strge	r1, [r4, #0]
 8003b7e:	b90d      	cbnz	r5, 8003b84 <_printf_i+0x110>
 8003b80:	2e00      	cmp	r6, #0
 8003b82:	d04b      	beq.n	8003c1c <_printf_i+0x1a8>
 8003b84:	4616      	mov	r6, r2
 8003b86:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b8a:	fb03 5711 	mls	r7, r3, r1, r5
 8003b8e:	5dc7      	ldrb	r7, [r0, r7]
 8003b90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b94:	462f      	mov	r7, r5
 8003b96:	42bb      	cmp	r3, r7
 8003b98:	460d      	mov	r5, r1
 8003b9a:	d9f4      	bls.n	8003b86 <_printf_i+0x112>
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d10b      	bne.n	8003bb8 <_printf_i+0x144>
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	07df      	lsls	r7, r3, #31
 8003ba4:	d508      	bpl.n	8003bb8 <_printf_i+0x144>
 8003ba6:	6923      	ldr	r3, [r4, #16]
 8003ba8:	6861      	ldr	r1, [r4, #4]
 8003baa:	4299      	cmp	r1, r3
 8003bac:	bfde      	ittt	le
 8003bae:	2330      	movle	r3, #48	@ 0x30
 8003bb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bb8:	1b92      	subs	r2, r2, r6
 8003bba:	6122      	str	r2, [r4, #16]
 8003bbc:	f8cd a000 	str.w	sl, [sp]
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	aa03      	add	r2, sp, #12
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	f7ff fee6 	bl	8003998 <_printf_common>
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d14a      	bne.n	8003c66 <_printf_i+0x1f2>
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	b004      	add	sp, #16
 8003bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	f043 0320 	orr.w	r3, r3, #32
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	4833      	ldr	r0, [pc, #204]	@ (8003cb0 <_printf_i+0x23c>)
 8003be4:	2778      	movs	r7, #120	@ 0x78
 8003be6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	6831      	ldr	r1, [r6, #0]
 8003bee:	061f      	lsls	r7, r3, #24
 8003bf0:	f851 5b04 	ldr.w	r5, [r1], #4
 8003bf4:	d402      	bmi.n	8003bfc <_printf_i+0x188>
 8003bf6:	065f      	lsls	r7, r3, #25
 8003bf8:	bf48      	it	mi
 8003bfa:	b2ad      	uxthmi	r5, r5
 8003bfc:	6031      	str	r1, [r6, #0]
 8003bfe:	07d9      	lsls	r1, r3, #31
 8003c00:	bf44      	itt	mi
 8003c02:	f043 0320 	orrmi.w	r3, r3, #32
 8003c06:	6023      	strmi	r3, [r4, #0]
 8003c08:	b11d      	cbz	r5, 8003c12 <_printf_i+0x19e>
 8003c0a:	2310      	movs	r3, #16
 8003c0c:	e7ac      	b.n	8003b68 <_printf_i+0xf4>
 8003c0e:	4827      	ldr	r0, [pc, #156]	@ (8003cac <_printf_i+0x238>)
 8003c10:	e7e9      	b.n	8003be6 <_printf_i+0x172>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	f023 0320 	bic.w	r3, r3, #32
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	e7f6      	b.n	8003c0a <_printf_i+0x196>
 8003c1c:	4616      	mov	r6, r2
 8003c1e:	e7bd      	b.n	8003b9c <_printf_i+0x128>
 8003c20:	6833      	ldr	r3, [r6, #0]
 8003c22:	6825      	ldr	r5, [r4, #0]
 8003c24:	6961      	ldr	r1, [r4, #20]
 8003c26:	1d18      	adds	r0, r3, #4
 8003c28:	6030      	str	r0, [r6, #0]
 8003c2a:	062e      	lsls	r6, r5, #24
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	d501      	bpl.n	8003c34 <_printf_i+0x1c0>
 8003c30:	6019      	str	r1, [r3, #0]
 8003c32:	e002      	b.n	8003c3a <_printf_i+0x1c6>
 8003c34:	0668      	lsls	r0, r5, #25
 8003c36:	d5fb      	bpl.n	8003c30 <_printf_i+0x1bc>
 8003c38:	8019      	strh	r1, [r3, #0]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	6123      	str	r3, [r4, #16]
 8003c3e:	4616      	mov	r6, r2
 8003c40:	e7bc      	b.n	8003bbc <_printf_i+0x148>
 8003c42:	6833      	ldr	r3, [r6, #0]
 8003c44:	1d1a      	adds	r2, r3, #4
 8003c46:	6032      	str	r2, [r6, #0]
 8003c48:	681e      	ldr	r6, [r3, #0]
 8003c4a:	6862      	ldr	r2, [r4, #4]
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f7fc fb46 	bl	80002e0 <memchr>
 8003c54:	b108      	cbz	r0, 8003c5a <_printf_i+0x1e6>
 8003c56:	1b80      	subs	r0, r0, r6
 8003c58:	6060      	str	r0, [r4, #4]
 8003c5a:	6863      	ldr	r3, [r4, #4]
 8003c5c:	6123      	str	r3, [r4, #16]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c64:	e7aa      	b.n	8003bbc <_printf_i+0x148>
 8003c66:	6923      	ldr	r3, [r4, #16]
 8003c68:	4632      	mov	r2, r6
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	4640      	mov	r0, r8
 8003c6e:	47d0      	blx	sl
 8003c70:	3001      	adds	r0, #1
 8003c72:	d0ad      	beq.n	8003bd0 <_printf_i+0x15c>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	079b      	lsls	r3, r3, #30
 8003c78:	d413      	bmi.n	8003ca2 <_printf_i+0x22e>
 8003c7a:	68e0      	ldr	r0, [r4, #12]
 8003c7c:	9b03      	ldr	r3, [sp, #12]
 8003c7e:	4298      	cmp	r0, r3
 8003c80:	bfb8      	it	lt
 8003c82:	4618      	movlt	r0, r3
 8003c84:	e7a6      	b.n	8003bd4 <_printf_i+0x160>
 8003c86:	2301      	movs	r3, #1
 8003c88:	4632      	mov	r2, r6
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	4640      	mov	r0, r8
 8003c8e:	47d0      	blx	sl
 8003c90:	3001      	adds	r0, #1
 8003c92:	d09d      	beq.n	8003bd0 <_printf_i+0x15c>
 8003c94:	3501      	adds	r5, #1
 8003c96:	68e3      	ldr	r3, [r4, #12]
 8003c98:	9903      	ldr	r1, [sp, #12]
 8003c9a:	1a5b      	subs	r3, r3, r1
 8003c9c:	42ab      	cmp	r3, r5
 8003c9e:	dcf2      	bgt.n	8003c86 <_printf_i+0x212>
 8003ca0:	e7eb      	b.n	8003c7a <_printf_i+0x206>
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	f104 0619 	add.w	r6, r4, #25
 8003ca8:	e7f5      	b.n	8003c96 <_printf_i+0x222>
 8003caa:	bf00      	nop
 8003cac:	080040e1 	.word	0x080040e1
 8003cb0:	080040f2 	.word	0x080040f2

08003cb4 <__sflush_r>:
 8003cb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cbc:	0716      	lsls	r6, r2, #28
 8003cbe:	4605      	mov	r5, r0
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	d454      	bmi.n	8003d6e <__sflush_r+0xba>
 8003cc4:	684b      	ldr	r3, [r1, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	dc02      	bgt.n	8003cd0 <__sflush_r+0x1c>
 8003cca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	dd48      	ble.n	8003d62 <__sflush_r+0xae>
 8003cd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003cd2:	2e00      	cmp	r6, #0
 8003cd4:	d045      	beq.n	8003d62 <__sflush_r+0xae>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003cdc:	682f      	ldr	r7, [r5, #0]
 8003cde:	6a21      	ldr	r1, [r4, #32]
 8003ce0:	602b      	str	r3, [r5, #0]
 8003ce2:	d030      	beq.n	8003d46 <__sflush_r+0x92>
 8003ce4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ce6:	89a3      	ldrh	r3, [r4, #12]
 8003ce8:	0759      	lsls	r1, r3, #29
 8003cea:	d505      	bpl.n	8003cf8 <__sflush_r+0x44>
 8003cec:	6863      	ldr	r3, [r4, #4]
 8003cee:	1ad2      	subs	r2, r2, r3
 8003cf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003cf2:	b10b      	cbz	r3, 8003cf8 <__sflush_r+0x44>
 8003cf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003cf6:	1ad2      	subs	r2, r2, r3
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003cfc:	6a21      	ldr	r1, [r4, #32]
 8003cfe:	4628      	mov	r0, r5
 8003d00:	47b0      	blx	r6
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	d106      	bne.n	8003d16 <__sflush_r+0x62>
 8003d08:	6829      	ldr	r1, [r5, #0]
 8003d0a:	291d      	cmp	r1, #29
 8003d0c:	d82b      	bhi.n	8003d66 <__sflush_r+0xb2>
 8003d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003db8 <__sflush_r+0x104>)
 8003d10:	410a      	asrs	r2, r1
 8003d12:	07d6      	lsls	r6, r2, #31
 8003d14:	d427      	bmi.n	8003d66 <__sflush_r+0xb2>
 8003d16:	2200      	movs	r2, #0
 8003d18:	6062      	str	r2, [r4, #4]
 8003d1a:	04d9      	lsls	r1, r3, #19
 8003d1c:	6922      	ldr	r2, [r4, #16]
 8003d1e:	6022      	str	r2, [r4, #0]
 8003d20:	d504      	bpl.n	8003d2c <__sflush_r+0x78>
 8003d22:	1c42      	adds	r2, r0, #1
 8003d24:	d101      	bne.n	8003d2a <__sflush_r+0x76>
 8003d26:	682b      	ldr	r3, [r5, #0]
 8003d28:	b903      	cbnz	r3, 8003d2c <__sflush_r+0x78>
 8003d2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003d2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d2e:	602f      	str	r7, [r5, #0]
 8003d30:	b1b9      	cbz	r1, 8003d62 <__sflush_r+0xae>
 8003d32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d36:	4299      	cmp	r1, r3
 8003d38:	d002      	beq.n	8003d40 <__sflush_r+0x8c>
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f7ff fbf2 	bl	8003524 <_free_r>
 8003d40:	2300      	movs	r3, #0
 8003d42:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d44:	e00d      	b.n	8003d62 <__sflush_r+0xae>
 8003d46:	2301      	movs	r3, #1
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b0      	blx	r6
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	1c50      	adds	r0, r2, #1
 8003d50:	d1c9      	bne.n	8003ce6 <__sflush_r+0x32>
 8003d52:	682b      	ldr	r3, [r5, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0c6      	beq.n	8003ce6 <__sflush_r+0x32>
 8003d58:	2b1d      	cmp	r3, #29
 8003d5a:	d001      	beq.n	8003d60 <__sflush_r+0xac>
 8003d5c:	2b16      	cmp	r3, #22
 8003d5e:	d11e      	bne.n	8003d9e <__sflush_r+0xea>
 8003d60:	602f      	str	r7, [r5, #0]
 8003d62:	2000      	movs	r0, #0
 8003d64:	e022      	b.n	8003dac <__sflush_r+0xf8>
 8003d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d6a:	b21b      	sxth	r3, r3
 8003d6c:	e01b      	b.n	8003da6 <__sflush_r+0xf2>
 8003d6e:	690f      	ldr	r7, [r1, #16]
 8003d70:	2f00      	cmp	r7, #0
 8003d72:	d0f6      	beq.n	8003d62 <__sflush_r+0xae>
 8003d74:	0793      	lsls	r3, r2, #30
 8003d76:	680e      	ldr	r6, [r1, #0]
 8003d78:	bf08      	it	eq
 8003d7a:	694b      	ldreq	r3, [r1, #20]
 8003d7c:	600f      	str	r7, [r1, #0]
 8003d7e:	bf18      	it	ne
 8003d80:	2300      	movne	r3, #0
 8003d82:	eba6 0807 	sub.w	r8, r6, r7
 8003d86:	608b      	str	r3, [r1, #8]
 8003d88:	f1b8 0f00 	cmp.w	r8, #0
 8003d8c:	dde9      	ble.n	8003d62 <__sflush_r+0xae>
 8003d8e:	6a21      	ldr	r1, [r4, #32]
 8003d90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003d92:	4643      	mov	r3, r8
 8003d94:	463a      	mov	r2, r7
 8003d96:	4628      	mov	r0, r5
 8003d98:	47b0      	blx	r6
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	dc08      	bgt.n	8003db0 <__sflush_r+0xfc>
 8003d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003da6:	81a3      	strh	r3, [r4, #12]
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db0:	4407      	add	r7, r0
 8003db2:	eba8 0800 	sub.w	r8, r8, r0
 8003db6:	e7e7      	b.n	8003d88 <__sflush_r+0xd4>
 8003db8:	dfbffffe 	.word	0xdfbffffe

08003dbc <_fflush_r>:
 8003dbc:	b538      	push	{r3, r4, r5, lr}
 8003dbe:	690b      	ldr	r3, [r1, #16]
 8003dc0:	4605      	mov	r5, r0
 8003dc2:	460c      	mov	r4, r1
 8003dc4:	b913      	cbnz	r3, 8003dcc <_fflush_r+0x10>
 8003dc6:	2500      	movs	r5, #0
 8003dc8:	4628      	mov	r0, r5
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	b118      	cbz	r0, 8003dd6 <_fflush_r+0x1a>
 8003dce:	6a03      	ldr	r3, [r0, #32]
 8003dd0:	b90b      	cbnz	r3, 8003dd6 <_fflush_r+0x1a>
 8003dd2:	f7ff faa5 	bl	8003320 <__sinit>
 8003dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f3      	beq.n	8003dc6 <_fflush_r+0xa>
 8003dde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003de0:	07d0      	lsls	r0, r2, #31
 8003de2:	d404      	bmi.n	8003dee <_fflush_r+0x32>
 8003de4:	0599      	lsls	r1, r3, #22
 8003de6:	d402      	bmi.n	8003dee <_fflush_r+0x32>
 8003de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dea:	f7ff fb98 	bl	800351e <__retarget_lock_acquire_recursive>
 8003dee:	4628      	mov	r0, r5
 8003df0:	4621      	mov	r1, r4
 8003df2:	f7ff ff5f 	bl	8003cb4 <__sflush_r>
 8003df6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003df8:	07da      	lsls	r2, r3, #31
 8003dfa:	4605      	mov	r5, r0
 8003dfc:	d4e4      	bmi.n	8003dc8 <_fflush_r+0xc>
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	059b      	lsls	r3, r3, #22
 8003e02:	d4e1      	bmi.n	8003dc8 <_fflush_r+0xc>
 8003e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e06:	f7ff fb8b 	bl	8003520 <__retarget_lock_release_recursive>
 8003e0a:	e7dd      	b.n	8003dc8 <_fflush_r+0xc>

08003e0c <__swbuf_r>:
 8003e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0e:	460e      	mov	r6, r1
 8003e10:	4614      	mov	r4, r2
 8003e12:	4605      	mov	r5, r0
 8003e14:	b118      	cbz	r0, 8003e1e <__swbuf_r+0x12>
 8003e16:	6a03      	ldr	r3, [r0, #32]
 8003e18:	b90b      	cbnz	r3, 8003e1e <__swbuf_r+0x12>
 8003e1a:	f7ff fa81 	bl	8003320 <__sinit>
 8003e1e:	69a3      	ldr	r3, [r4, #24]
 8003e20:	60a3      	str	r3, [r4, #8]
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	071a      	lsls	r2, r3, #28
 8003e26:	d501      	bpl.n	8003e2c <__swbuf_r+0x20>
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	b943      	cbnz	r3, 8003e3e <__swbuf_r+0x32>
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f000 f82a 	bl	8003e88 <__swsetup_r>
 8003e34:	b118      	cbz	r0, 8003e3e <__swbuf_r+0x32>
 8003e36:	f04f 37ff 	mov.w	r7, #4294967295
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	6922      	ldr	r2, [r4, #16]
 8003e42:	1a98      	subs	r0, r3, r2
 8003e44:	6963      	ldr	r3, [r4, #20]
 8003e46:	b2f6      	uxtb	r6, r6
 8003e48:	4283      	cmp	r3, r0
 8003e4a:	4637      	mov	r7, r6
 8003e4c:	dc05      	bgt.n	8003e5a <__swbuf_r+0x4e>
 8003e4e:	4621      	mov	r1, r4
 8003e50:	4628      	mov	r0, r5
 8003e52:	f7ff ffb3 	bl	8003dbc <_fflush_r>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d1ed      	bne.n	8003e36 <__swbuf_r+0x2a>
 8003e5a:	68a3      	ldr	r3, [r4, #8]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	60a3      	str	r3, [r4, #8]
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	6022      	str	r2, [r4, #0]
 8003e66:	701e      	strb	r6, [r3, #0]
 8003e68:	6962      	ldr	r2, [r4, #20]
 8003e6a:	1c43      	adds	r3, r0, #1
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d004      	beq.n	8003e7a <__swbuf_r+0x6e>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	07db      	lsls	r3, r3, #31
 8003e74:	d5e1      	bpl.n	8003e3a <__swbuf_r+0x2e>
 8003e76:	2e0a      	cmp	r6, #10
 8003e78:	d1df      	bne.n	8003e3a <__swbuf_r+0x2e>
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	f7ff ff9d 	bl	8003dbc <_fflush_r>
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d0d9      	beq.n	8003e3a <__swbuf_r+0x2e>
 8003e86:	e7d6      	b.n	8003e36 <__swbuf_r+0x2a>

08003e88 <__swsetup_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	4b29      	ldr	r3, [pc, #164]	@ (8003f30 <__swsetup_r+0xa8>)
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	460c      	mov	r4, r1
 8003e92:	b118      	cbz	r0, 8003e9c <__swsetup_r+0x14>
 8003e94:	6a03      	ldr	r3, [r0, #32]
 8003e96:	b90b      	cbnz	r3, 8003e9c <__swsetup_r+0x14>
 8003e98:	f7ff fa42 	bl	8003320 <__sinit>
 8003e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ea0:	0719      	lsls	r1, r3, #28
 8003ea2:	d422      	bmi.n	8003eea <__swsetup_r+0x62>
 8003ea4:	06da      	lsls	r2, r3, #27
 8003ea6:	d407      	bmi.n	8003eb8 <__swsetup_r+0x30>
 8003ea8:	2209      	movs	r2, #9
 8003eaa:	602a      	str	r2, [r5, #0]
 8003eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eb0:	81a3      	strh	r3, [r4, #12]
 8003eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb6:	e033      	b.n	8003f20 <__swsetup_r+0x98>
 8003eb8:	0758      	lsls	r0, r3, #29
 8003eba:	d512      	bpl.n	8003ee2 <__swsetup_r+0x5a>
 8003ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ebe:	b141      	cbz	r1, 8003ed2 <__swsetup_r+0x4a>
 8003ec0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ec4:	4299      	cmp	r1, r3
 8003ec6:	d002      	beq.n	8003ece <__swsetup_r+0x46>
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f7ff fb2b 	bl	8003524 <_free_r>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ed8:	81a3      	strh	r3, [r4, #12]
 8003eda:	2300      	movs	r3, #0
 8003edc:	6063      	str	r3, [r4, #4]
 8003ede:	6923      	ldr	r3, [r4, #16]
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	f043 0308 	orr.w	r3, r3, #8
 8003ee8:	81a3      	strh	r3, [r4, #12]
 8003eea:	6923      	ldr	r3, [r4, #16]
 8003eec:	b94b      	cbnz	r3, 8003f02 <__swsetup_r+0x7a>
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ef8:	d003      	beq.n	8003f02 <__swsetup_r+0x7a>
 8003efa:	4621      	mov	r1, r4
 8003efc:	4628      	mov	r0, r5
 8003efe:	f000 f84f 	bl	8003fa0 <__smakebuf_r>
 8003f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f06:	f013 0201 	ands.w	r2, r3, #1
 8003f0a:	d00a      	beq.n	8003f22 <__swsetup_r+0x9a>
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	60a2      	str	r2, [r4, #8]
 8003f10:	6962      	ldr	r2, [r4, #20]
 8003f12:	4252      	negs	r2, r2
 8003f14:	61a2      	str	r2, [r4, #24]
 8003f16:	6922      	ldr	r2, [r4, #16]
 8003f18:	b942      	cbnz	r2, 8003f2c <__swsetup_r+0xa4>
 8003f1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f1e:	d1c5      	bne.n	8003eac <__swsetup_r+0x24>
 8003f20:	bd38      	pop	{r3, r4, r5, pc}
 8003f22:	0799      	lsls	r1, r3, #30
 8003f24:	bf58      	it	pl
 8003f26:	6962      	ldrpl	r2, [r4, #20]
 8003f28:	60a2      	str	r2, [r4, #8]
 8003f2a:	e7f4      	b.n	8003f16 <__swsetup_r+0x8e>
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	e7f7      	b.n	8003f20 <__swsetup_r+0x98>
 8003f30:	24000024 	.word	0x24000024

08003f34 <_sbrk_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4d06      	ldr	r5, [pc, #24]	@ (8003f50 <_sbrk_r+0x1c>)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	602b      	str	r3, [r5, #0]
 8003f40:	f000 f88c 	bl	800405c <_sbrk>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d102      	bne.n	8003f4e <_sbrk_r+0x1a>
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	b103      	cbz	r3, 8003f4e <_sbrk_r+0x1a>
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	24005328 	.word	0x24005328

08003f54 <__swhatbuf_r>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	460c      	mov	r4, r1
 8003f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	b096      	sub	sp, #88	@ 0x58
 8003f60:	4615      	mov	r5, r2
 8003f62:	461e      	mov	r6, r3
 8003f64:	da0d      	bge.n	8003f82 <__swhatbuf_r+0x2e>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	bf14      	ite	ne
 8003f72:	2340      	movne	r3, #64	@ 0x40
 8003f74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003f78:	2000      	movs	r0, #0
 8003f7a:	6031      	str	r1, [r6, #0]
 8003f7c:	602b      	str	r3, [r5, #0]
 8003f7e:	b016      	add	sp, #88	@ 0x58
 8003f80:	bd70      	pop	{r4, r5, r6, pc}
 8003f82:	466a      	mov	r2, sp
 8003f84:	f000 f848 	bl	8004018 <_fstat_r>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	dbec      	blt.n	8003f66 <__swhatbuf_r+0x12>
 8003f8c:	9901      	ldr	r1, [sp, #4]
 8003f8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003f92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003f96:	4259      	negs	r1, r3
 8003f98:	4159      	adcs	r1, r3
 8003f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f9e:	e7eb      	b.n	8003f78 <__swhatbuf_r+0x24>

08003fa0 <__smakebuf_r>:
 8003fa0:	898b      	ldrh	r3, [r1, #12]
 8003fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fa4:	079d      	lsls	r5, r3, #30
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	460c      	mov	r4, r1
 8003faa:	d507      	bpl.n	8003fbc <__smakebuf_r+0x1c>
 8003fac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	6123      	str	r3, [r4, #16]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	6163      	str	r3, [r4, #20]
 8003fb8:	b003      	add	sp, #12
 8003fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fbc:	ab01      	add	r3, sp, #4
 8003fbe:	466a      	mov	r2, sp
 8003fc0:	f7ff ffc8 	bl	8003f54 <__swhatbuf_r>
 8003fc4:	9f00      	ldr	r7, [sp, #0]
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	4639      	mov	r1, r7
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f7ff fb16 	bl	80035fc <_malloc_r>
 8003fd0:	b948      	cbnz	r0, 8003fe6 <__smakebuf_r+0x46>
 8003fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fd6:	059a      	lsls	r2, r3, #22
 8003fd8:	d4ee      	bmi.n	8003fb8 <__smakebuf_r+0x18>
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	e7e2      	b.n	8003fac <__smakebuf_r+0xc>
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	6020      	str	r0, [r4, #0]
 8003fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fee:	81a3      	strh	r3, [r4, #12]
 8003ff0:	9b01      	ldr	r3, [sp, #4]
 8003ff2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ff6:	b15b      	cbz	r3, 8004010 <__smakebuf_r+0x70>
 8003ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f000 f81d 	bl	800403c <_isatty_r>
 8004002:	b128      	cbz	r0, 8004010 <__smakebuf_r+0x70>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	431d      	orrs	r5, r3
 8004014:	81a5      	strh	r5, [r4, #12]
 8004016:	e7cf      	b.n	8003fb8 <__smakebuf_r+0x18>

08004018 <_fstat_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4d07      	ldr	r5, [pc, #28]	@ (8004038 <_fstat_r+0x20>)
 800401c:	2300      	movs	r3, #0
 800401e:	4604      	mov	r4, r0
 8004020:	4608      	mov	r0, r1
 8004022:	4611      	mov	r1, r2
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	f7fc fc7a 	bl	800091e <_fstat>
 800402a:	1c43      	adds	r3, r0, #1
 800402c:	d102      	bne.n	8004034 <_fstat_r+0x1c>
 800402e:	682b      	ldr	r3, [r5, #0]
 8004030:	b103      	cbz	r3, 8004034 <_fstat_r+0x1c>
 8004032:	6023      	str	r3, [r4, #0]
 8004034:	bd38      	pop	{r3, r4, r5, pc}
 8004036:	bf00      	nop
 8004038:	24005328 	.word	0x24005328

0800403c <_isatty_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4d06      	ldr	r5, [pc, #24]	@ (8004058 <_isatty_r+0x1c>)
 8004040:	2300      	movs	r3, #0
 8004042:	4604      	mov	r4, r0
 8004044:	4608      	mov	r0, r1
 8004046:	602b      	str	r3, [r5, #0]
 8004048:	f7fc fc79 	bl	800093e <_isatty>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_isatty_r+0x1a>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	b103      	cbz	r3, 8004056 <_isatty_r+0x1a>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	24005328 	.word	0x24005328

0800405c <_sbrk>:
 800405c:	4a04      	ldr	r2, [pc, #16]	@ (8004070 <_sbrk+0x14>)
 800405e:	6811      	ldr	r1, [r2, #0]
 8004060:	4603      	mov	r3, r0
 8004062:	b909      	cbnz	r1, 8004068 <_sbrk+0xc>
 8004064:	4903      	ldr	r1, [pc, #12]	@ (8004074 <_sbrk+0x18>)
 8004066:	6011      	str	r1, [r2, #0]
 8004068:	6810      	ldr	r0, [r2, #0]
 800406a:	4403      	add	r3, r0
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4770      	bx	lr
 8004070:	24005338 	.word	0x24005338
 8004074:	24005340 	.word	0x24005340

08004078 <_init>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	bf00      	nop
 800407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407e:	bc08      	pop	{r3}
 8004080:	469e      	mov	lr, r3
 8004082:	4770      	bx	lr

08004084 <_fini>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	bf00      	nop
 8004088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408a:	bc08      	pop	{r3}
 800408c:	469e      	mov	lr, r3
 800408e:	4770      	bx	lr
